{"$message_type":"diagnostic","message":"the trait bound `chrono::naive::date::NaiveDate: Encode<'_, sqlx::MySql>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":"the trait `Encode<'_, sqlx::MySql>` is not implemented for `chrono::naive::date::NaiveDate`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `Encode<'q, DB>`:\n  <bool as Encode<'q, sqlx::Sqlite>>\n  <bool as Encode<'_, sqlx::Postgres>>\n  <bool as Encode<'_, sqlx::MySql>>\n  <i8 as Encode<'q, sqlx::Sqlite>>\n  <i8 as Encode<'_, sqlx::Postgres>>\n  <i8 as Encode<'_, sqlx::MySql>>\n  <i16 as Encode<'q, sqlx::Sqlite>>\n  <i16 as Encode<'_, sqlx::Postgres>>\nand 52 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&chrono::naive::date::NaiveDate` to implement `Encode<'_, sqlx::MySql>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"1 redundant requirement hidden","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&chrono::naive::date::NaiveDate>` to implement `Encode<'_, sqlx::MySql>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs","byte_start":2895,"byte_end":2909,"line_start":79,"line_end":79,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `chrono::naive::date::NaiveDate: Encode<'_, sqlx::MySql>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_mysql!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Encode<'_, sqlx::MySql>` is not implemented for `chrono::naive::date::NaiveDate`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `Encode<'q, DB>`:\u001b[0m\n\u001b[0m             <bool as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i16 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m           and 52 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&chrono::naive::date::NaiveDate` to implement `Encode<'_, sqlx::MySql>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: 1 redundant requirement hidden\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&chrono::naive::date::NaiveDate>` to implement `Encode<'_, sqlx::MySql>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs:79:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m79\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `chrono::naive::date::NaiveDate: sqlx::Type<sqlx::MySql>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":"the trait `sqlx::Type<sqlx::MySql>` is not implemented for `chrono::naive::date::NaiveDate`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `sqlx::Type<DB>`:\n  <bool as sqlx::Type<sqlx::Postgres>>\n  <bool as sqlx::Type<sqlx::Sqlite>>\n  <bool as sqlx::Type<sqlx::MySql>>\n  <i8 as sqlx::Type<sqlx::Postgres>>\n  <i8 as sqlx::Type<sqlx::Sqlite>>\n  <i8 as sqlx::Type<sqlx::MySql>>\n  <i16 as sqlx::Type<sqlx::Postgres>>\n  <i16 as sqlx::Type<sqlx::Sqlite>>\nand 60 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&chrono::naive::date::NaiveDate` to implement `sqlx::Type<sqlx::MySql>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&chrono::naive::date::NaiveDate>` to implement `Encode<'_, sqlx::MySql>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs","byte_start":2895,"byte_end":2909,"line_start":79,"line_end":79,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `chrono::naive::date::NaiveDate: sqlx::Type<sqlx::MySql>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_mysql!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `sqlx::Type<sqlx::MySql>` is not implemented for `chrono::naive::date::NaiveDate`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `sqlx::Type<DB>`:\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m           and 60 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&chrono::naive::date::NaiveDate` to implement `sqlx::Type<sqlx::MySql>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&chrono::naive::date::NaiveDate>` to implement `Encode<'_, sqlx::MySql>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs:79:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m79\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `chrono::naive::time::NaiveTime: Encode<'_, sqlx::MySql>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":"the trait `Encode<'_, sqlx::MySql>` is not implemented for `chrono::naive::time::NaiveTime`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `Encode<'q, DB>`:\n  <bool as Encode<'q, sqlx::Sqlite>>\n  <bool as Encode<'_, sqlx::Postgres>>\n  <bool as Encode<'_, sqlx::MySql>>\n  <i8 as Encode<'q, sqlx::Sqlite>>\n  <i8 as Encode<'_, sqlx::Postgres>>\n  <i8 as Encode<'_, sqlx::MySql>>\n  <i16 as Encode<'q, sqlx::Sqlite>>\n  <i16 as Encode<'_, sqlx::Postgres>>\nand 52 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&chrono::naive::time::NaiveTime` to implement `Encode<'_, sqlx::MySql>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"1 redundant requirement hidden","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&chrono::naive::time::NaiveTime>` to implement `Encode<'_, sqlx::MySql>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs","byte_start":2895,"byte_end":2909,"line_start":79,"line_end":79,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `chrono::naive::time::NaiveTime: Encode<'_, sqlx::MySql>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_mysql!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Encode<'_, sqlx::MySql>` is not implemented for `chrono::naive::time::NaiveTime`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `Encode<'q, DB>`:\u001b[0m\n\u001b[0m             <bool as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i16 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m           and 52 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&chrono::naive::time::NaiveTime` to implement `Encode<'_, sqlx::MySql>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: 1 redundant requirement hidden\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&chrono::naive::time::NaiveTime>` to implement `Encode<'_, sqlx::MySql>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs:79:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m79\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `chrono::naive::time::NaiveTime: sqlx::Type<sqlx::MySql>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":"the trait `sqlx::Type<sqlx::MySql>` is not implemented for `chrono::naive::time::NaiveTime`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `sqlx::Type<DB>`:\n  <bool as sqlx::Type<sqlx::Postgres>>\n  <bool as sqlx::Type<sqlx::Sqlite>>\n  <bool as sqlx::Type<sqlx::MySql>>\n  <i8 as sqlx::Type<sqlx::Postgres>>\n  <i8 as sqlx::Type<sqlx::Sqlite>>\n  <i8 as sqlx::Type<sqlx::MySql>>\n  <i16 as sqlx::Type<sqlx::Postgres>>\n  <i16 as sqlx::Type<sqlx::Sqlite>>\nand 60 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&chrono::naive::time::NaiveTime` to implement `sqlx::Type<sqlx::MySql>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&chrono::naive::time::NaiveTime>` to implement `Encode<'_, sqlx::MySql>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs","byte_start":2895,"byte_end":2909,"line_start":79,"line_end":79,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `chrono::naive::time::NaiveTime: sqlx::Type<sqlx::MySql>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_mysql!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `sqlx::Type<sqlx::MySql>` is not implemented for `chrono::naive::time::NaiveTime`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `sqlx::Type<DB>`:\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m           and 60 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&chrono::naive::time::NaiveTime` to implement `sqlx::Type<sqlx::MySql>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&chrono::naive::time::NaiveTime>` to implement `Encode<'_, sqlx::MySql>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs:79:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m79\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `chrono::naive::datetime::NaiveDateTime: Encode<'_, sqlx::MySql>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":"the trait `Encode<'_, sqlx::MySql>` is not implemented for `chrono::naive::datetime::NaiveDateTime`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `Encode<'q, DB>`:\n  <bool as Encode<'q, sqlx::Sqlite>>\n  <bool as Encode<'_, sqlx::Postgres>>\n  <bool as Encode<'_, sqlx::MySql>>\n  <i8 as Encode<'q, sqlx::Sqlite>>\n  <i8 as Encode<'_, sqlx::Postgres>>\n  <i8 as Encode<'_, sqlx::MySql>>\n  <i16 as Encode<'q, sqlx::Sqlite>>\n  <i16 as Encode<'_, sqlx::Postgres>>\nand 52 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&chrono::naive::datetime::NaiveDateTime` to implement `Encode<'_, sqlx::MySql>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"1 redundant requirement hidden","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&chrono::naive::datetime::NaiveDateTime>` to implement `Encode<'_, sqlx::MySql>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs","byte_start":2895,"byte_end":2909,"line_start":79,"line_end":79,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `chrono::naive::datetime::NaiveDateTime: Encode<'_, sqlx::MySql>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_mysql!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Encode<'_, sqlx::MySql>` is not implemented for `chrono::naive::datetime::NaiveDateTime`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `Encode<'q, DB>`:\u001b[0m\n\u001b[0m             <bool as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i16 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m           and 52 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&chrono::naive::datetime::NaiveDateTime` to implement `Encode<'_, sqlx::MySql>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: 1 redundant requirement hidden\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&chrono::naive::datetime::NaiveDateTime>` to implement `Encode<'_, sqlx::MySql>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs:79:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m79\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `chrono::naive::datetime::NaiveDateTime: sqlx::Type<sqlx::MySql>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":"the trait `sqlx::Type<sqlx::MySql>` is not implemented for `chrono::naive::datetime::NaiveDateTime`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `sqlx::Type<DB>`:\n  <bool as sqlx::Type<sqlx::Postgres>>\n  <bool as sqlx::Type<sqlx::Sqlite>>\n  <bool as sqlx::Type<sqlx::MySql>>\n  <i8 as sqlx::Type<sqlx::Postgres>>\n  <i8 as sqlx::Type<sqlx::Sqlite>>\n  <i8 as sqlx::Type<sqlx::MySql>>\n  <i16 as sqlx::Type<sqlx::Postgres>>\n  <i16 as sqlx::Type<sqlx::Sqlite>>\nand 60 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&chrono::naive::datetime::NaiveDateTime` to implement `sqlx::Type<sqlx::MySql>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&chrono::naive::datetime::NaiveDateTime>` to implement `Encode<'_, sqlx::MySql>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs","byte_start":2895,"byte_end":2909,"line_start":79,"line_end":79,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `chrono::naive::datetime::NaiveDateTime: sqlx::Type<sqlx::MySql>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_mysql!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `sqlx::Type<sqlx::MySql>` is not implemented for `chrono::naive::datetime::NaiveDateTime`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `sqlx::Type<DB>`:\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m           and 60 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&chrono::naive::datetime::NaiveDateTime` to implement `sqlx::Type<sqlx::MySql>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&chrono::naive::datetime::NaiveDateTime>` to implement `Encode<'_, sqlx::MySql>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs:79:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m79\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `chrono::datetime::DateTime<chrono::offset::utc::Utc>: Encode<'_, sqlx::MySql>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":"the trait `Encode<'_, sqlx::MySql>` is not implemented for `chrono::datetime::DateTime<chrono::offset::utc::Utc>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `Encode<'q, DB>`:\n  <bool as Encode<'q, sqlx::Sqlite>>\n  <bool as Encode<'_, sqlx::Postgres>>\n  <bool as Encode<'_, sqlx::MySql>>\n  <i8 as Encode<'q, sqlx::Sqlite>>\n  <i8 as Encode<'_, sqlx::Postgres>>\n  <i8 as Encode<'_, sqlx::MySql>>\n  <i16 as Encode<'q, sqlx::Sqlite>>\n  <i16 as Encode<'_, sqlx::Postgres>>\nand 52 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&chrono::datetime::DateTime<chrono::offset::utc::Utc>` to implement `Encode<'_, sqlx::MySql>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"1 redundant requirement hidden","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&chrono::datetime::DateTime<chrono::offset::utc::Utc>>` to implement `Encode<'_, sqlx::MySql>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs","byte_start":2895,"byte_end":2909,"line_start":79,"line_end":79,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `chrono::datetime::DateTime<chrono::offset::utc::Utc>: Encode<'_, sqlx::MySql>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_mysql!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Encode<'_, sqlx::MySql>` is not implemented for `chrono::datetime::DateTime<chrono::offset::utc::Utc>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `Encode<'q, DB>`:\u001b[0m\n\u001b[0m             <bool as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i16 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m           and 52 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&chrono::datetime::DateTime<chrono::offset::utc::Utc>` to implement `Encode<'_, sqlx::MySql>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: 1 redundant requirement hidden\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&chrono::datetime::DateTime<chrono::offset::utc::Utc>>` to implement `Encode<'_, sqlx::MySql>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs:79:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m79\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `chrono::datetime::DateTime<chrono::offset::utc::Utc>: sqlx::Type<sqlx::MySql>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":"the trait `sqlx::Type<sqlx::MySql>` is not implemented for `chrono::datetime::DateTime<chrono::offset::utc::Utc>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `sqlx::Type<DB>`:\n  <bool as sqlx::Type<sqlx::Postgres>>\n  <bool as sqlx::Type<sqlx::Sqlite>>\n  <bool as sqlx::Type<sqlx::MySql>>\n  <i8 as sqlx::Type<sqlx::Postgres>>\n  <i8 as sqlx::Type<sqlx::Sqlite>>\n  <i8 as sqlx::Type<sqlx::MySql>>\n  <i16 as sqlx::Type<sqlx::Postgres>>\n  <i16 as sqlx::Type<sqlx::Sqlite>>\nand 60 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&chrono::datetime::DateTime<chrono::offset::utc::Utc>` to implement `sqlx::Type<sqlx::MySql>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&chrono::datetime::DateTime<chrono::offset::utc::Utc>>` to implement `Encode<'_, sqlx::MySql>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs","byte_start":2895,"byte_end":2909,"line_start":79,"line_end":79,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `chrono::datetime::DateTime<chrono::offset::utc::Utc>: sqlx::Type<sqlx::MySql>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_mysql!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `sqlx::Type<sqlx::MySql>` is not implemented for `chrono::datetime::DateTime<chrono::offset::utc::Utc>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `sqlx::Type<DB>`:\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m           and 60 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&chrono::datetime::DateTime<chrono::offset::utc::Utc>` to implement `sqlx::Type<sqlx::MySql>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&chrono::datetime::DateTime<chrono::offset::utc::Utc>>` to implement `Encode<'_, sqlx::MySql>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs:79:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m79\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `chrono::datetime::DateTime<chrono::offset::local::Local>: Encode<'_, sqlx::MySql>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":"the trait `Encode<'_, sqlx::MySql>` is not implemented for `chrono::datetime::DateTime<chrono::offset::local::Local>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `Encode<'q, DB>`:\n  <bool as Encode<'q, sqlx::Sqlite>>\n  <bool as Encode<'_, sqlx::Postgres>>\n  <bool as Encode<'_, sqlx::MySql>>\n  <i8 as Encode<'q, sqlx::Sqlite>>\n  <i8 as Encode<'_, sqlx::Postgres>>\n  <i8 as Encode<'_, sqlx::MySql>>\n  <i16 as Encode<'q, sqlx::Sqlite>>\n  <i16 as Encode<'_, sqlx::Postgres>>\nand 52 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&chrono::datetime::DateTime<chrono::offset::local::Local>` to implement `Encode<'_, sqlx::MySql>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"1 redundant requirement hidden","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&chrono::datetime::DateTime<chrono::offset::local::Local>>` to implement `Encode<'_, sqlx::MySql>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs","byte_start":2895,"byte_end":2909,"line_start":79,"line_end":79,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `chrono::datetime::DateTime<chrono::offset::local::Local>: Encode<'_, sqlx::MySql>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_mysql!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Encode<'_, sqlx::MySql>` is not implemented for `chrono::datetime::DateTime<chrono::offset::local::Local>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `Encode<'q, DB>`:\u001b[0m\n\u001b[0m             <bool as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i16 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m           and 52 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&chrono::datetime::DateTime<chrono::offset::local::Local>` to implement `Encode<'_, sqlx::MySql>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: 1 redundant requirement hidden\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&chrono::datetime::DateTime<chrono::offset::local::Local>>` to implement `Encode<'_, sqlx::MySql>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs:79:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m79\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `chrono::datetime::DateTime<chrono::offset::local::Local>: sqlx::Type<sqlx::MySql>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":"the trait `sqlx::Type<sqlx::MySql>` is not implemented for `chrono::datetime::DateTime<chrono::offset::local::Local>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `sqlx::Type<DB>`:\n  <bool as sqlx::Type<sqlx::Postgres>>\n  <bool as sqlx::Type<sqlx::Sqlite>>\n  <bool as sqlx::Type<sqlx::MySql>>\n  <i8 as sqlx::Type<sqlx::Postgres>>\n  <i8 as sqlx::Type<sqlx::Sqlite>>\n  <i8 as sqlx::Type<sqlx::MySql>>\n  <i16 as sqlx::Type<sqlx::Postgres>>\n  <i16 as sqlx::Type<sqlx::Sqlite>>\nand 60 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&chrono::datetime::DateTime<chrono::offset::local::Local>` to implement `sqlx::Type<sqlx::MySql>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&chrono::datetime::DateTime<chrono::offset::local::Local>>` to implement `Encode<'_, sqlx::MySql>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs","byte_start":2895,"byte_end":2909,"line_start":79,"line_end":79,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `chrono::datetime::DateTime<chrono::offset::local::Local>: sqlx::Type<sqlx::MySql>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_mysql!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `sqlx::Type<sqlx::MySql>` is not implemented for `chrono::datetime::DateTime<chrono::offset::local::Local>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `sqlx::Type<DB>`:\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m           and 60 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&chrono::datetime::DateTime<chrono::offset::local::Local>` to implement `sqlx::Type<sqlx::MySql>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&chrono::datetime::DateTime<chrono::offset::local::Local>>` to implement `Encode<'_, sqlx::MySql>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs:79:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m79\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `time::date::Date: Encode<'_, sqlx::MySql>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":"the trait `Encode<'_, sqlx::MySql>` is not implemented for `time::date::Date`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `Encode<'q, DB>`:\n  <bool as Encode<'q, sqlx::Sqlite>>\n  <bool as Encode<'_, sqlx::Postgres>>\n  <bool as Encode<'_, sqlx::MySql>>\n  <i8 as Encode<'q, sqlx::Sqlite>>\n  <i8 as Encode<'_, sqlx::Postgres>>\n  <i8 as Encode<'_, sqlx::MySql>>\n  <i16 as Encode<'q, sqlx::Sqlite>>\n  <i16 as Encode<'_, sqlx::Postgres>>\nand 52 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&time::date::Date` to implement `Encode<'_, sqlx::MySql>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"1 redundant requirement hidden","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&time::date::Date>` to implement `Encode<'_, sqlx::MySql>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs","byte_start":2895,"byte_end":2909,"line_start":79,"line_end":79,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `time::date::Date: Encode<'_, sqlx::MySql>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_mysql!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Encode<'_, sqlx::MySql>` is not implemented for `time::date::Date`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `Encode<'q, DB>`:\u001b[0m\n\u001b[0m             <bool as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i16 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m           and 52 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&time::date::Date` to implement `Encode<'_, sqlx::MySql>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: 1 redundant requirement hidden\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&time::date::Date>` to implement `Encode<'_, sqlx::MySql>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs:79:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m79\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `time::date::Date: sqlx::Type<sqlx::MySql>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":"the trait `sqlx::Type<sqlx::MySql>` is not implemented for `time::date::Date`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `sqlx::Type<DB>`:\n  <bool as sqlx::Type<sqlx::Postgres>>\n  <bool as sqlx::Type<sqlx::Sqlite>>\n  <bool as sqlx::Type<sqlx::MySql>>\n  <i8 as sqlx::Type<sqlx::Postgres>>\n  <i8 as sqlx::Type<sqlx::Sqlite>>\n  <i8 as sqlx::Type<sqlx::MySql>>\n  <i16 as sqlx::Type<sqlx::Postgres>>\n  <i16 as sqlx::Type<sqlx::Sqlite>>\nand 60 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&time::date::Date` to implement `sqlx::Type<sqlx::MySql>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&time::date::Date>` to implement `Encode<'_, sqlx::MySql>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs","byte_start":2895,"byte_end":2909,"line_start":79,"line_end":79,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `time::date::Date: sqlx::Type<sqlx::MySql>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_mysql!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `sqlx::Type<sqlx::MySql>` is not implemented for `time::date::Date`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `sqlx::Type<DB>`:\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m           and 60 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&time::date::Date` to implement `sqlx::Type<sqlx::MySql>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&time::date::Date>` to implement `Encode<'_, sqlx::MySql>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs:79:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m79\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `time::time_mod::Time: Encode<'_, sqlx::MySql>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":"the trait `Encode<'_, sqlx::MySql>` is not implemented for `time::time_mod::Time`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `Encode<'q, DB>`:\n  <bool as Encode<'q, sqlx::Sqlite>>\n  <bool as Encode<'_, sqlx::Postgres>>\n  <bool as Encode<'_, sqlx::MySql>>\n  <i8 as Encode<'q, sqlx::Sqlite>>\n  <i8 as Encode<'_, sqlx::Postgres>>\n  <i8 as Encode<'_, sqlx::MySql>>\n  <i16 as Encode<'q, sqlx::Sqlite>>\n  <i16 as Encode<'_, sqlx::Postgres>>\nand 52 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&time::time_mod::Time` to implement `Encode<'_, sqlx::MySql>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"1 redundant requirement hidden","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&time::time_mod::Time>` to implement `Encode<'_, sqlx::MySql>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs","byte_start":2895,"byte_end":2909,"line_start":79,"line_end":79,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `time::time_mod::Time: Encode<'_, sqlx::MySql>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_mysql!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Encode<'_, sqlx::MySql>` is not implemented for `time::time_mod::Time`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `Encode<'q, DB>`:\u001b[0m\n\u001b[0m             <bool as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i16 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m           and 52 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&time::time_mod::Time` to implement `Encode<'_, sqlx::MySql>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: 1 redundant requirement hidden\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&time::time_mod::Time>` to implement `Encode<'_, sqlx::MySql>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs:79:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m79\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `time::time_mod::Time: sqlx::Type<sqlx::MySql>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":"the trait `sqlx::Type<sqlx::MySql>` is not implemented for `time::time_mod::Time`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `sqlx::Type<DB>`:\n  <bool as sqlx::Type<sqlx::Postgres>>\n  <bool as sqlx::Type<sqlx::Sqlite>>\n  <bool as sqlx::Type<sqlx::MySql>>\n  <i8 as sqlx::Type<sqlx::Postgres>>\n  <i8 as sqlx::Type<sqlx::Sqlite>>\n  <i8 as sqlx::Type<sqlx::MySql>>\n  <i16 as sqlx::Type<sqlx::Postgres>>\n  <i16 as sqlx::Type<sqlx::Sqlite>>\nand 60 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&time::time_mod::Time` to implement `sqlx::Type<sqlx::MySql>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&time::time_mod::Time>` to implement `Encode<'_, sqlx::MySql>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs","byte_start":2895,"byte_end":2909,"line_start":79,"line_end":79,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `time::time_mod::Time: sqlx::Type<sqlx::MySql>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_mysql!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `sqlx::Type<sqlx::MySql>` is not implemented for `time::time_mod::Time`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `sqlx::Type<DB>`:\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m           and 60 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&time::time_mod::Time` to implement `sqlx::Type<sqlx::MySql>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&time::time_mod::Time>` to implement `Encode<'_, sqlx::MySql>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs:79:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m79\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `time::primitive_date_time::PrimitiveDateTime: Encode<'_, sqlx::MySql>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":"the trait `Encode<'_, sqlx::MySql>` is not implemented for `time::primitive_date_time::PrimitiveDateTime`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `Encode<'q, DB>`:\n  <bool as Encode<'q, sqlx::Sqlite>>\n  <bool as Encode<'_, sqlx::Postgres>>\n  <bool as Encode<'_, sqlx::MySql>>\n  <i8 as Encode<'q, sqlx::Sqlite>>\n  <i8 as Encode<'_, sqlx::Postgres>>\n  <i8 as Encode<'_, sqlx::MySql>>\n  <i16 as Encode<'q, sqlx::Sqlite>>\n  <i16 as Encode<'_, sqlx::Postgres>>\nand 52 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&time::primitive_date_time::PrimitiveDateTime` to implement `Encode<'_, sqlx::MySql>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"1 redundant requirement hidden","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&time::primitive_date_time::PrimitiveDateTime>` to implement `Encode<'_, sqlx::MySql>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs","byte_start":2895,"byte_end":2909,"line_start":79,"line_end":79,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `time::primitive_date_time::PrimitiveDateTime: Encode<'_, sqlx::MySql>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_mysql!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Encode<'_, sqlx::MySql>` is not implemented for `time::primitive_date_time::PrimitiveDateTime`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `Encode<'q, DB>`:\u001b[0m\n\u001b[0m             <bool as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i16 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m           and 52 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&time::primitive_date_time::PrimitiveDateTime` to implement `Encode<'_, sqlx::MySql>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: 1 redundant requirement hidden\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&time::primitive_date_time::PrimitiveDateTime>` to implement `Encode<'_, sqlx::MySql>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs:79:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m79\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `time::primitive_date_time::PrimitiveDateTime: sqlx::Type<sqlx::MySql>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":"the trait `sqlx::Type<sqlx::MySql>` is not implemented for `time::primitive_date_time::PrimitiveDateTime`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `sqlx::Type<DB>`:\n  <bool as sqlx::Type<sqlx::Postgres>>\n  <bool as sqlx::Type<sqlx::Sqlite>>\n  <bool as sqlx::Type<sqlx::MySql>>\n  <i8 as sqlx::Type<sqlx::Postgres>>\n  <i8 as sqlx::Type<sqlx::Sqlite>>\n  <i8 as sqlx::Type<sqlx::MySql>>\n  <i16 as sqlx::Type<sqlx::Postgres>>\n  <i16 as sqlx::Type<sqlx::Sqlite>>\nand 60 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&time::primitive_date_time::PrimitiveDateTime` to implement `sqlx::Type<sqlx::MySql>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&time::primitive_date_time::PrimitiveDateTime>` to implement `Encode<'_, sqlx::MySql>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs","byte_start":2895,"byte_end":2909,"line_start":79,"line_end":79,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `time::primitive_date_time::PrimitiveDateTime: sqlx::Type<sqlx::MySql>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_mysql!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `sqlx::Type<sqlx::MySql>` is not implemented for `time::primitive_date_time::PrimitiveDateTime`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `sqlx::Type<DB>`:\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m           and 60 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&time::primitive_date_time::PrimitiveDateTime` to implement `sqlx::Type<sqlx::MySql>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&time::primitive_date_time::PrimitiveDateTime>` to implement `Encode<'_, sqlx::MySql>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs:79:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m79\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `time::offset_date_time::OffsetDateTime: Encode<'_, sqlx::MySql>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":"the trait `Encode<'_, sqlx::MySql>` is not implemented for `time::offset_date_time::OffsetDateTime`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `Encode<'q, DB>`:\n  <bool as Encode<'q, sqlx::Sqlite>>\n  <bool as Encode<'_, sqlx::Postgres>>\n  <bool as Encode<'_, sqlx::MySql>>\n  <i8 as Encode<'q, sqlx::Sqlite>>\n  <i8 as Encode<'_, sqlx::Postgres>>\n  <i8 as Encode<'_, sqlx::MySql>>\n  <i16 as Encode<'q, sqlx::Sqlite>>\n  <i16 as Encode<'_, sqlx::Postgres>>\nand 52 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&time::offset_date_time::OffsetDateTime` to implement `Encode<'_, sqlx::MySql>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"1 redundant requirement hidden","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&time::offset_date_time::OffsetDateTime>` to implement `Encode<'_, sqlx::MySql>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs","byte_start":2895,"byte_end":2909,"line_start":79,"line_end":79,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `time::offset_date_time::OffsetDateTime: Encode<'_, sqlx::MySql>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_mysql!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Encode<'_, sqlx::MySql>` is not implemented for `time::offset_date_time::OffsetDateTime`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `Encode<'q, DB>`:\u001b[0m\n\u001b[0m             <bool as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i16 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m           and 52 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&time::offset_date_time::OffsetDateTime` to implement `Encode<'_, sqlx::MySql>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: 1 redundant requirement hidden\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&time::offset_date_time::OffsetDateTime>` to implement `Encode<'_, sqlx::MySql>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs:79:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m79\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `time::offset_date_time::OffsetDateTime: sqlx::Type<sqlx::MySql>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":"the trait `sqlx::Type<sqlx::MySql>` is not implemented for `time::offset_date_time::OffsetDateTime`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `sqlx::Type<DB>`:\n  <bool as sqlx::Type<sqlx::Postgres>>\n  <bool as sqlx::Type<sqlx::Sqlite>>\n  <bool as sqlx::Type<sqlx::MySql>>\n  <i8 as sqlx::Type<sqlx::Postgres>>\n  <i8 as sqlx::Type<sqlx::Sqlite>>\n  <i8 as sqlx::Type<sqlx::MySql>>\n  <i16 as sqlx::Type<sqlx::Postgres>>\n  <i16 as sqlx::Type<sqlx::Sqlite>>\nand 60 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&time::offset_date_time::OffsetDateTime` to implement `sqlx::Type<sqlx::MySql>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&time::offset_date_time::OffsetDateTime>` to implement `Encode<'_, sqlx::MySql>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs","byte_start":2895,"byte_end":2909,"line_start":79,"line_end":79,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `time::offset_date_time::OffsetDateTime: sqlx::Type<sqlx::MySql>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_mysql!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `sqlx::Type<sqlx::MySql>` is not implemented for `time::offset_date_time::OffsetDateTime`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `sqlx::Type<DB>`:\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m           and 60 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&time::offset_date_time::OffsetDateTime` to implement `sqlx::Type<sqlx::MySql>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&time::offset_date_time::OffsetDateTime>` to implement `Encode<'_, sqlx::MySql>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs:79:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m79\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `uuid::Uuid: Encode<'_, sqlx::MySql>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":"the trait `Encode<'_, sqlx::MySql>` is not implemented for `uuid::Uuid`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `Encode<'q, DB>`:\n  <bool as Encode<'q, sqlx::Sqlite>>\n  <bool as Encode<'_, sqlx::Postgres>>\n  <bool as Encode<'_, sqlx::MySql>>\n  <i8 as Encode<'q, sqlx::Sqlite>>\n  <i8 as Encode<'_, sqlx::Postgres>>\n  <i8 as Encode<'_, sqlx::MySql>>\n  <i16 as Encode<'q, sqlx::Sqlite>>\n  <i16 as Encode<'_, sqlx::Postgres>>\nand 52 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&uuid::Uuid` to implement `Encode<'_, sqlx::MySql>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"1 redundant requirement hidden","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&uuid::Uuid>` to implement `Encode<'_, sqlx::MySql>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs","byte_start":2895,"byte_end":2909,"line_start":79,"line_end":79,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `uuid::Uuid: Encode<'_, sqlx::MySql>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_mysql!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Encode<'_, sqlx::MySql>` is not implemented for `uuid::Uuid`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `Encode<'q, DB>`:\u001b[0m\n\u001b[0m             <bool as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i16 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m           and 52 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&uuid::Uuid` to implement `Encode<'_, sqlx::MySql>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: 1 redundant requirement hidden\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&uuid::Uuid>` to implement `Encode<'_, sqlx::MySql>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs:79:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m79\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `uuid::Uuid: sqlx::Type<sqlx::MySql>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":"the trait `sqlx::Type<sqlx::MySql>` is not implemented for `uuid::Uuid`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `sqlx::Type<DB>`:\n  <bool as sqlx::Type<sqlx::Postgres>>\n  <bool as sqlx::Type<sqlx::Sqlite>>\n  <bool as sqlx::Type<sqlx::MySql>>\n  <i8 as sqlx::Type<sqlx::Postgres>>\n  <i8 as sqlx::Type<sqlx::Sqlite>>\n  <i8 as sqlx::Type<sqlx::MySql>>\n  <i16 as sqlx::Type<sqlx::Postgres>>\n  <i16 as sqlx::Type<sqlx::Sqlite>>\nand 60 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&uuid::Uuid` to implement `sqlx::Type<sqlx::MySql>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&uuid::Uuid>` to implement `Encode<'_, sqlx::MySql>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs","byte_start":2895,"byte_end":2909,"line_start":79,"line_end":79,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `uuid::Uuid: sqlx::Type<sqlx::MySql>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_mysql!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `sqlx::Type<sqlx::MySql>` is not implemented for `uuid::Uuid`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `sqlx::Type<DB>`:\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m           and 60 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&uuid::Uuid` to implement `sqlx::Type<sqlx::MySql>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&uuid::Uuid>` to implement `Encode<'_, sqlx::MySql>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs:79:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m79\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `rust_decimal::decimal::Decimal: Encode<'_, sqlx::MySql>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":"the trait `Encode<'_, sqlx::MySql>` is not implemented for `rust_decimal::decimal::Decimal`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `Encode<'q, DB>`:\n  <bool as Encode<'q, sqlx::Sqlite>>\n  <bool as Encode<'_, sqlx::Postgres>>\n  <bool as Encode<'_, sqlx::MySql>>\n  <i8 as Encode<'q, sqlx::Sqlite>>\n  <i8 as Encode<'_, sqlx::Postgres>>\n  <i8 as Encode<'_, sqlx::MySql>>\n  <i16 as Encode<'q, sqlx::Sqlite>>\n  <i16 as Encode<'_, sqlx::Postgres>>\nand 52 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&rust_decimal::decimal::Decimal` to implement `Encode<'_, sqlx::MySql>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"1 redundant requirement hidden","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&rust_decimal::decimal::Decimal>` to implement `Encode<'_, sqlx::MySql>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs","byte_start":2895,"byte_end":2909,"line_start":79,"line_end":79,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `rust_decimal::decimal::Decimal: Encode<'_, sqlx::MySql>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_mysql!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Encode<'_, sqlx::MySql>` is not implemented for `rust_decimal::decimal::Decimal`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `Encode<'q, DB>`:\u001b[0m\n\u001b[0m             <bool as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i16 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m           and 52 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&rust_decimal::decimal::Decimal` to implement `Encode<'_, sqlx::MySql>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: 1 redundant requirement hidden\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&rust_decimal::decimal::Decimal>` to implement `Encode<'_, sqlx::MySql>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs:79:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m79\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `rust_decimal::decimal::Decimal: sqlx::Type<sqlx::MySql>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":"the trait `sqlx::Type<sqlx::MySql>` is not implemented for `rust_decimal::decimal::Decimal`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `sqlx::Type<DB>`:\n  <bool as sqlx::Type<sqlx::Postgres>>\n  <bool as sqlx::Type<sqlx::Sqlite>>\n  <bool as sqlx::Type<sqlx::MySql>>\n  <i8 as sqlx::Type<sqlx::Postgres>>\n  <i8 as sqlx::Type<sqlx::Sqlite>>\n  <i8 as sqlx::Type<sqlx::MySql>>\n  <i16 as sqlx::Type<sqlx::Postgres>>\n  <i16 as sqlx::Type<sqlx::Sqlite>>\nand 60 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&rust_decimal::decimal::Decimal` to implement `sqlx::Type<sqlx::MySql>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&rust_decimal::decimal::Decimal>` to implement `Encode<'_, sqlx::MySql>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs","byte_start":2895,"byte_end":2909,"line_start":79,"line_end":79,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `rust_decimal::decimal::Decimal: sqlx::Type<sqlx::MySql>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_mysql!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `sqlx::Type<sqlx::MySql>` is not implemented for `rust_decimal::decimal::Decimal`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `sqlx::Type<DB>`:\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m           and 60 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&rust_decimal::decimal::Decimal` to implement `sqlx::Type<sqlx::MySql>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&rust_decimal::decimal::Decimal>` to implement `Encode<'_, sqlx::MySql>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs:79:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m79\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `chrono::naive::date::NaiveDate: Encode<'_, sqlx::MySql>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":"the trait `Encode<'_, sqlx::MySql>` is not implemented for `chrono::naive::date::NaiveDate`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `Encode<'q, DB>`:\n  <bool as Encode<'q, sqlx::Sqlite>>\n  <bool as Encode<'_, sqlx::Postgres>>\n  <bool as Encode<'_, sqlx::MySql>>\n  <i8 as Encode<'q, sqlx::Sqlite>>\n  <i8 as Encode<'_, sqlx::Postgres>>\n  <i8 as Encode<'_, sqlx::MySql>>\n  <i16 as Encode<'q, sqlx::Sqlite>>\n  <i16 as Encode<'_, sqlx::Postgres>>\nand 52 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&chrono::naive::date::NaiveDate` to implement `Encode<'_, sqlx::MySql>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"1 redundant requirement hidden","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&chrono::naive::date::NaiveDate>` to implement `Encode<'_, sqlx::MySql>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs","byte_start":1595,"byte_end":1609,"line_start":54,"line_end":54,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `chrono::naive::date::NaiveDate: Encode<'_, sqlx::MySql>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_mysql!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Encode<'_, sqlx::MySql>` is not implemented for `chrono::naive::date::NaiveDate`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `Encode<'q, DB>`:\u001b[0m\n\u001b[0m             <bool as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i16 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m           and 52 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&chrono::naive::date::NaiveDate` to implement `Encode<'_, sqlx::MySql>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: 1 redundant requirement hidden\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&chrono::naive::date::NaiveDate>` to implement `Encode<'_, sqlx::MySql>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs:54:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `chrono::naive::date::NaiveDate: sqlx::Type<sqlx::MySql>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":"the trait `sqlx::Type<sqlx::MySql>` is not implemented for `chrono::naive::date::NaiveDate`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `sqlx::Type<DB>`:\n  <bool as sqlx::Type<sqlx::Postgres>>\n  <bool as sqlx::Type<sqlx::Sqlite>>\n  <bool as sqlx::Type<sqlx::MySql>>\n  <i8 as sqlx::Type<sqlx::Postgres>>\n  <i8 as sqlx::Type<sqlx::Sqlite>>\n  <i8 as sqlx::Type<sqlx::MySql>>\n  <i16 as sqlx::Type<sqlx::Postgres>>\n  <i16 as sqlx::Type<sqlx::Sqlite>>\nand 60 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&chrono::naive::date::NaiveDate` to implement `sqlx::Type<sqlx::MySql>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&chrono::naive::date::NaiveDate>` to implement `Encode<'_, sqlx::MySql>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs","byte_start":1595,"byte_end":1609,"line_start":54,"line_end":54,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `chrono::naive::date::NaiveDate: sqlx::Type<sqlx::MySql>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_mysql!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `sqlx::Type<sqlx::MySql>` is not implemented for `chrono::naive::date::NaiveDate`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `sqlx::Type<DB>`:\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m           and 60 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&chrono::naive::date::NaiveDate` to implement `sqlx::Type<sqlx::MySql>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&chrono::naive::date::NaiveDate>` to implement `Encode<'_, sqlx::MySql>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs:54:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `chrono::naive::time::NaiveTime: Encode<'_, sqlx::MySql>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":"the trait `Encode<'_, sqlx::MySql>` is not implemented for `chrono::naive::time::NaiveTime`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `Encode<'q, DB>`:\n  <bool as Encode<'q, sqlx::Sqlite>>\n  <bool as Encode<'_, sqlx::Postgres>>\n  <bool as Encode<'_, sqlx::MySql>>\n  <i8 as Encode<'q, sqlx::Sqlite>>\n  <i8 as Encode<'_, sqlx::Postgres>>\n  <i8 as Encode<'_, sqlx::MySql>>\n  <i16 as Encode<'q, sqlx::Sqlite>>\n  <i16 as Encode<'_, sqlx::Postgres>>\nand 52 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&chrono::naive::time::NaiveTime` to implement `Encode<'_, sqlx::MySql>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"1 redundant requirement hidden","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&chrono::naive::time::NaiveTime>` to implement `Encode<'_, sqlx::MySql>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs","byte_start":1595,"byte_end":1609,"line_start":54,"line_end":54,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `chrono::naive::time::NaiveTime: Encode<'_, sqlx::MySql>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_mysql!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Encode<'_, sqlx::MySql>` is not implemented for `chrono::naive::time::NaiveTime`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `Encode<'q, DB>`:\u001b[0m\n\u001b[0m             <bool as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i16 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m           and 52 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&chrono::naive::time::NaiveTime` to implement `Encode<'_, sqlx::MySql>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: 1 redundant requirement hidden\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&chrono::naive::time::NaiveTime>` to implement `Encode<'_, sqlx::MySql>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs:54:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `chrono::naive::time::NaiveTime: sqlx::Type<sqlx::MySql>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":"the trait `sqlx::Type<sqlx::MySql>` is not implemented for `chrono::naive::time::NaiveTime`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `sqlx::Type<DB>`:\n  <bool as sqlx::Type<sqlx::Postgres>>\n  <bool as sqlx::Type<sqlx::Sqlite>>\n  <bool as sqlx::Type<sqlx::MySql>>\n  <i8 as sqlx::Type<sqlx::Postgres>>\n  <i8 as sqlx::Type<sqlx::Sqlite>>\n  <i8 as sqlx::Type<sqlx::MySql>>\n  <i16 as sqlx::Type<sqlx::Postgres>>\n  <i16 as sqlx::Type<sqlx::Sqlite>>\nand 60 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&chrono::naive::time::NaiveTime` to implement `sqlx::Type<sqlx::MySql>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&chrono::naive::time::NaiveTime>` to implement `Encode<'_, sqlx::MySql>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs","byte_start":1595,"byte_end":1609,"line_start":54,"line_end":54,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `chrono::naive::time::NaiveTime: sqlx::Type<sqlx::MySql>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_mysql!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `sqlx::Type<sqlx::MySql>` is not implemented for `chrono::naive::time::NaiveTime`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `sqlx::Type<DB>`:\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m           and 60 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&chrono::naive::time::NaiveTime` to implement `sqlx::Type<sqlx::MySql>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&chrono::naive::time::NaiveTime>` to implement `Encode<'_, sqlx::MySql>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs:54:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `chrono::naive::datetime::NaiveDateTime: Encode<'_, sqlx::MySql>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":"the trait `Encode<'_, sqlx::MySql>` is not implemented for `chrono::naive::datetime::NaiveDateTime`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `Encode<'q, DB>`:\n  <bool as Encode<'q, sqlx::Sqlite>>\n  <bool as Encode<'_, sqlx::Postgres>>\n  <bool as Encode<'_, sqlx::MySql>>\n  <i8 as Encode<'q, sqlx::Sqlite>>\n  <i8 as Encode<'_, sqlx::Postgres>>\n  <i8 as Encode<'_, sqlx::MySql>>\n  <i16 as Encode<'q, sqlx::Sqlite>>\n  <i16 as Encode<'_, sqlx::Postgres>>\nand 52 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&chrono::naive::datetime::NaiveDateTime` to implement `Encode<'_, sqlx::MySql>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"1 redundant requirement hidden","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&chrono::naive::datetime::NaiveDateTime>` to implement `Encode<'_, sqlx::MySql>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs","byte_start":1595,"byte_end":1609,"line_start":54,"line_end":54,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `chrono::naive::datetime::NaiveDateTime: Encode<'_, sqlx::MySql>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_mysql!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Encode<'_, sqlx::MySql>` is not implemented for `chrono::naive::datetime::NaiveDateTime`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `Encode<'q, DB>`:\u001b[0m\n\u001b[0m             <bool as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i16 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m           and 52 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&chrono::naive::datetime::NaiveDateTime` to implement `Encode<'_, sqlx::MySql>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: 1 redundant requirement hidden\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&chrono::naive::datetime::NaiveDateTime>` to implement `Encode<'_, sqlx::MySql>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs:54:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `chrono::naive::datetime::NaiveDateTime: sqlx::Type<sqlx::MySql>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":"the trait `sqlx::Type<sqlx::MySql>` is not implemented for `chrono::naive::datetime::NaiveDateTime`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `sqlx::Type<DB>`:\n  <bool as sqlx::Type<sqlx::Postgres>>\n  <bool as sqlx::Type<sqlx::Sqlite>>\n  <bool as sqlx::Type<sqlx::MySql>>\n  <i8 as sqlx::Type<sqlx::Postgres>>\n  <i8 as sqlx::Type<sqlx::Sqlite>>\n  <i8 as sqlx::Type<sqlx::MySql>>\n  <i16 as sqlx::Type<sqlx::Postgres>>\n  <i16 as sqlx::Type<sqlx::Sqlite>>\nand 60 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&chrono::naive::datetime::NaiveDateTime` to implement `sqlx::Type<sqlx::MySql>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&chrono::naive::datetime::NaiveDateTime>` to implement `Encode<'_, sqlx::MySql>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs","byte_start":1595,"byte_end":1609,"line_start":54,"line_end":54,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `chrono::naive::datetime::NaiveDateTime: sqlx::Type<sqlx::MySql>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_mysql!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `sqlx::Type<sqlx::MySql>` is not implemented for `chrono::naive::datetime::NaiveDateTime`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `sqlx::Type<DB>`:\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m           and 60 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&chrono::naive::datetime::NaiveDateTime` to implement `sqlx::Type<sqlx::MySql>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&chrono::naive::datetime::NaiveDateTime>` to implement `Encode<'_, sqlx::MySql>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs:54:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `chrono::datetime::DateTime<chrono::offset::utc::Utc>: Encode<'_, sqlx::MySql>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":"the trait `Encode<'_, sqlx::MySql>` is not implemented for `chrono::datetime::DateTime<chrono::offset::utc::Utc>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `Encode<'q, DB>`:\n  <bool as Encode<'q, sqlx::Sqlite>>\n  <bool as Encode<'_, sqlx::Postgres>>\n  <bool as Encode<'_, sqlx::MySql>>\n  <i8 as Encode<'q, sqlx::Sqlite>>\n  <i8 as Encode<'_, sqlx::Postgres>>\n  <i8 as Encode<'_, sqlx::MySql>>\n  <i16 as Encode<'q, sqlx::Sqlite>>\n  <i16 as Encode<'_, sqlx::Postgres>>\nand 52 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&chrono::datetime::DateTime<chrono::offset::utc::Utc>` to implement `Encode<'_, sqlx::MySql>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"1 redundant requirement hidden","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&chrono::datetime::DateTime<chrono::offset::utc::Utc>>` to implement `Encode<'_, sqlx::MySql>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs","byte_start":1595,"byte_end":1609,"line_start":54,"line_end":54,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `chrono::datetime::DateTime<chrono::offset::utc::Utc>: Encode<'_, sqlx::MySql>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_mysql!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Encode<'_, sqlx::MySql>` is not implemented for `chrono::datetime::DateTime<chrono::offset::utc::Utc>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `Encode<'q, DB>`:\u001b[0m\n\u001b[0m             <bool as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i16 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m           and 52 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&chrono::datetime::DateTime<chrono::offset::utc::Utc>` to implement `Encode<'_, sqlx::MySql>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: 1 redundant requirement hidden\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&chrono::datetime::DateTime<chrono::offset::utc::Utc>>` to implement `Encode<'_, sqlx::MySql>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs:54:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `chrono::datetime::DateTime<chrono::offset::utc::Utc>: sqlx::Type<sqlx::MySql>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":"the trait `sqlx::Type<sqlx::MySql>` is not implemented for `chrono::datetime::DateTime<chrono::offset::utc::Utc>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `sqlx::Type<DB>`:\n  <bool as sqlx::Type<sqlx::Postgres>>\n  <bool as sqlx::Type<sqlx::Sqlite>>\n  <bool as sqlx::Type<sqlx::MySql>>\n  <i8 as sqlx::Type<sqlx::Postgres>>\n  <i8 as sqlx::Type<sqlx::Sqlite>>\n  <i8 as sqlx::Type<sqlx::MySql>>\n  <i16 as sqlx::Type<sqlx::Postgres>>\n  <i16 as sqlx::Type<sqlx::Sqlite>>\nand 60 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&chrono::datetime::DateTime<chrono::offset::utc::Utc>` to implement `sqlx::Type<sqlx::MySql>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&chrono::datetime::DateTime<chrono::offset::utc::Utc>>` to implement `Encode<'_, sqlx::MySql>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs","byte_start":1595,"byte_end":1609,"line_start":54,"line_end":54,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `chrono::datetime::DateTime<chrono::offset::utc::Utc>: sqlx::Type<sqlx::MySql>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_mysql!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `sqlx::Type<sqlx::MySql>` is not implemented for `chrono::datetime::DateTime<chrono::offset::utc::Utc>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `sqlx::Type<DB>`:\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m           and 60 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&chrono::datetime::DateTime<chrono::offset::utc::Utc>` to implement `sqlx::Type<sqlx::MySql>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&chrono::datetime::DateTime<chrono::offset::utc::Utc>>` to implement `Encode<'_, sqlx::MySql>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs:54:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `chrono::datetime::DateTime<chrono::offset::local::Local>: Encode<'_, sqlx::MySql>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":"the trait `Encode<'_, sqlx::MySql>` is not implemented for `chrono::datetime::DateTime<chrono::offset::local::Local>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `Encode<'q, DB>`:\n  <bool as Encode<'q, sqlx::Sqlite>>\n  <bool as Encode<'_, sqlx::Postgres>>\n  <bool as Encode<'_, sqlx::MySql>>\n  <i8 as Encode<'q, sqlx::Sqlite>>\n  <i8 as Encode<'_, sqlx::Postgres>>\n  <i8 as Encode<'_, sqlx::MySql>>\n  <i16 as Encode<'q, sqlx::Sqlite>>\n  <i16 as Encode<'_, sqlx::Postgres>>\nand 52 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&chrono::datetime::DateTime<chrono::offset::local::Local>` to implement `Encode<'_, sqlx::MySql>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"1 redundant requirement hidden","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&chrono::datetime::DateTime<chrono::offset::local::Local>>` to implement `Encode<'_, sqlx::MySql>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs","byte_start":1595,"byte_end":1609,"line_start":54,"line_end":54,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `chrono::datetime::DateTime<chrono::offset::local::Local>: Encode<'_, sqlx::MySql>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_mysql!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Encode<'_, sqlx::MySql>` is not implemented for `chrono::datetime::DateTime<chrono::offset::local::Local>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `Encode<'q, DB>`:\u001b[0m\n\u001b[0m             <bool as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i16 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m           and 52 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&chrono::datetime::DateTime<chrono::offset::local::Local>` to implement `Encode<'_, sqlx::MySql>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: 1 redundant requirement hidden\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&chrono::datetime::DateTime<chrono::offset::local::Local>>` to implement `Encode<'_, sqlx::MySql>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs:54:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `chrono::datetime::DateTime<chrono::offset::local::Local>: sqlx::Type<sqlx::MySql>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":"the trait `sqlx::Type<sqlx::MySql>` is not implemented for `chrono::datetime::DateTime<chrono::offset::local::Local>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `sqlx::Type<DB>`:\n  <bool as sqlx::Type<sqlx::Postgres>>\n  <bool as sqlx::Type<sqlx::Sqlite>>\n  <bool as sqlx::Type<sqlx::MySql>>\n  <i8 as sqlx::Type<sqlx::Postgres>>\n  <i8 as sqlx::Type<sqlx::Sqlite>>\n  <i8 as sqlx::Type<sqlx::MySql>>\n  <i16 as sqlx::Type<sqlx::Postgres>>\n  <i16 as sqlx::Type<sqlx::Sqlite>>\nand 60 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&chrono::datetime::DateTime<chrono::offset::local::Local>` to implement `sqlx::Type<sqlx::MySql>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&chrono::datetime::DateTime<chrono::offset::local::Local>>` to implement `Encode<'_, sqlx::MySql>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs","byte_start":1595,"byte_end":1609,"line_start":54,"line_end":54,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `chrono::datetime::DateTime<chrono::offset::local::Local>: sqlx::Type<sqlx::MySql>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_mysql!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `sqlx::Type<sqlx::MySql>` is not implemented for `chrono::datetime::DateTime<chrono::offset::local::Local>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `sqlx::Type<DB>`:\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m           and 60 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&chrono::datetime::DateTime<chrono::offset::local::Local>` to implement `sqlx::Type<sqlx::MySql>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&chrono::datetime::DateTime<chrono::offset::local::Local>>` to implement `Encode<'_, sqlx::MySql>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs:54:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `time::date::Date: Encode<'_, sqlx::MySql>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":"the trait `Encode<'_, sqlx::MySql>` is not implemented for `time::date::Date`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `Encode<'q, DB>`:\n  <bool as Encode<'q, sqlx::Sqlite>>\n  <bool as Encode<'_, sqlx::Postgres>>\n  <bool as Encode<'_, sqlx::MySql>>\n  <i8 as Encode<'q, sqlx::Sqlite>>\n  <i8 as Encode<'_, sqlx::Postgres>>\n  <i8 as Encode<'_, sqlx::MySql>>\n  <i16 as Encode<'q, sqlx::Sqlite>>\n  <i16 as Encode<'_, sqlx::Postgres>>\nand 52 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&time::date::Date` to implement `Encode<'_, sqlx::MySql>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"1 redundant requirement hidden","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&time::date::Date>` to implement `Encode<'_, sqlx::MySql>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs","byte_start":1595,"byte_end":1609,"line_start":54,"line_end":54,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `time::date::Date: Encode<'_, sqlx::MySql>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_mysql!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Encode<'_, sqlx::MySql>` is not implemented for `time::date::Date`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `Encode<'q, DB>`:\u001b[0m\n\u001b[0m             <bool as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i16 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m           and 52 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&time::date::Date` to implement `Encode<'_, sqlx::MySql>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: 1 redundant requirement hidden\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&time::date::Date>` to implement `Encode<'_, sqlx::MySql>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs:54:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `time::date::Date: sqlx::Type<sqlx::MySql>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":"the trait `sqlx::Type<sqlx::MySql>` is not implemented for `time::date::Date`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `sqlx::Type<DB>`:\n  <bool as sqlx::Type<sqlx::Postgres>>\n  <bool as sqlx::Type<sqlx::Sqlite>>\n  <bool as sqlx::Type<sqlx::MySql>>\n  <i8 as sqlx::Type<sqlx::Postgres>>\n  <i8 as sqlx::Type<sqlx::Sqlite>>\n  <i8 as sqlx::Type<sqlx::MySql>>\n  <i16 as sqlx::Type<sqlx::Postgres>>\n  <i16 as sqlx::Type<sqlx::Sqlite>>\nand 60 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&time::date::Date` to implement `sqlx::Type<sqlx::MySql>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&time::date::Date>` to implement `Encode<'_, sqlx::MySql>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs","byte_start":1595,"byte_end":1609,"line_start":54,"line_end":54,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `time::date::Date: sqlx::Type<sqlx::MySql>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_mysql!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `sqlx::Type<sqlx::MySql>` is not implemented for `time::date::Date`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `sqlx::Type<DB>`:\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m           and 60 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&time::date::Date` to implement `sqlx::Type<sqlx::MySql>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&time::date::Date>` to implement `Encode<'_, sqlx::MySql>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs:54:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `time::time_mod::Time: Encode<'_, sqlx::MySql>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":"the trait `Encode<'_, sqlx::MySql>` is not implemented for `time::time_mod::Time`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `Encode<'q, DB>`:\n  <bool as Encode<'q, sqlx::Sqlite>>\n  <bool as Encode<'_, sqlx::Postgres>>\n  <bool as Encode<'_, sqlx::MySql>>\n  <i8 as Encode<'q, sqlx::Sqlite>>\n  <i8 as Encode<'_, sqlx::Postgres>>\n  <i8 as Encode<'_, sqlx::MySql>>\n  <i16 as Encode<'q, sqlx::Sqlite>>\n  <i16 as Encode<'_, sqlx::Postgres>>\nand 52 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&time::time_mod::Time` to implement `Encode<'_, sqlx::MySql>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"1 redundant requirement hidden","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&time::time_mod::Time>` to implement `Encode<'_, sqlx::MySql>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs","byte_start":1595,"byte_end":1609,"line_start":54,"line_end":54,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `time::time_mod::Time: Encode<'_, sqlx::MySql>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_mysql!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Encode<'_, sqlx::MySql>` is not implemented for `time::time_mod::Time`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `Encode<'q, DB>`:\u001b[0m\n\u001b[0m             <bool as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i16 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m           and 52 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&time::time_mod::Time` to implement `Encode<'_, sqlx::MySql>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: 1 redundant requirement hidden\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&time::time_mod::Time>` to implement `Encode<'_, sqlx::MySql>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs:54:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `time::time_mod::Time: sqlx::Type<sqlx::MySql>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":"the trait `sqlx::Type<sqlx::MySql>` is not implemented for `time::time_mod::Time`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `sqlx::Type<DB>`:\n  <bool as sqlx::Type<sqlx::Postgres>>\n  <bool as sqlx::Type<sqlx::Sqlite>>\n  <bool as sqlx::Type<sqlx::MySql>>\n  <i8 as sqlx::Type<sqlx::Postgres>>\n  <i8 as sqlx::Type<sqlx::Sqlite>>\n  <i8 as sqlx::Type<sqlx::MySql>>\n  <i16 as sqlx::Type<sqlx::Postgres>>\n  <i16 as sqlx::Type<sqlx::Sqlite>>\nand 60 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&time::time_mod::Time` to implement `sqlx::Type<sqlx::MySql>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&time::time_mod::Time>` to implement `Encode<'_, sqlx::MySql>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs","byte_start":1595,"byte_end":1609,"line_start":54,"line_end":54,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `time::time_mod::Time: sqlx::Type<sqlx::MySql>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_mysql!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `sqlx::Type<sqlx::MySql>` is not implemented for `time::time_mod::Time`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `sqlx::Type<DB>`:\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m           and 60 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&time::time_mod::Time` to implement `sqlx::Type<sqlx::MySql>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&time::time_mod::Time>` to implement `Encode<'_, sqlx::MySql>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs:54:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `time::primitive_date_time::PrimitiveDateTime: Encode<'_, sqlx::MySql>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":"the trait `Encode<'_, sqlx::MySql>` is not implemented for `time::primitive_date_time::PrimitiveDateTime`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `Encode<'q, DB>`:\n  <bool as Encode<'q, sqlx::Sqlite>>\n  <bool as Encode<'_, sqlx::Postgres>>\n  <bool as Encode<'_, sqlx::MySql>>\n  <i8 as Encode<'q, sqlx::Sqlite>>\n  <i8 as Encode<'_, sqlx::Postgres>>\n  <i8 as Encode<'_, sqlx::MySql>>\n  <i16 as Encode<'q, sqlx::Sqlite>>\n  <i16 as Encode<'_, sqlx::Postgres>>\nand 52 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&time::primitive_date_time::PrimitiveDateTime` to implement `Encode<'_, sqlx::MySql>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"1 redundant requirement hidden","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&time::primitive_date_time::PrimitiveDateTime>` to implement `Encode<'_, sqlx::MySql>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs","byte_start":1595,"byte_end":1609,"line_start":54,"line_end":54,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `time::primitive_date_time::PrimitiveDateTime: Encode<'_, sqlx::MySql>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_mysql!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Encode<'_, sqlx::MySql>` is not implemented for `time::primitive_date_time::PrimitiveDateTime`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `Encode<'q, DB>`:\u001b[0m\n\u001b[0m             <bool as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i16 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m           and 52 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&time::primitive_date_time::PrimitiveDateTime` to implement `Encode<'_, sqlx::MySql>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: 1 redundant requirement hidden\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&time::primitive_date_time::PrimitiveDateTime>` to implement `Encode<'_, sqlx::MySql>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs:54:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `time::primitive_date_time::PrimitiveDateTime: sqlx::Type<sqlx::MySql>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":"the trait `sqlx::Type<sqlx::MySql>` is not implemented for `time::primitive_date_time::PrimitiveDateTime`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `sqlx::Type<DB>`:\n  <bool as sqlx::Type<sqlx::Postgres>>\n  <bool as sqlx::Type<sqlx::Sqlite>>\n  <bool as sqlx::Type<sqlx::MySql>>\n  <i8 as sqlx::Type<sqlx::Postgres>>\n  <i8 as sqlx::Type<sqlx::Sqlite>>\n  <i8 as sqlx::Type<sqlx::MySql>>\n  <i16 as sqlx::Type<sqlx::Postgres>>\n  <i16 as sqlx::Type<sqlx::Sqlite>>\nand 60 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&time::primitive_date_time::PrimitiveDateTime` to implement `sqlx::Type<sqlx::MySql>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&time::primitive_date_time::PrimitiveDateTime>` to implement `Encode<'_, sqlx::MySql>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs","byte_start":1595,"byte_end":1609,"line_start":54,"line_end":54,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `time::primitive_date_time::PrimitiveDateTime: sqlx::Type<sqlx::MySql>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_mysql!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `sqlx::Type<sqlx::MySql>` is not implemented for `time::primitive_date_time::PrimitiveDateTime`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `sqlx::Type<DB>`:\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m           and 60 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&time::primitive_date_time::PrimitiveDateTime` to implement `sqlx::Type<sqlx::MySql>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&time::primitive_date_time::PrimitiveDateTime>` to implement `Encode<'_, sqlx::MySql>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs:54:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `time::offset_date_time::OffsetDateTime: Encode<'_, sqlx::MySql>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":"the trait `Encode<'_, sqlx::MySql>` is not implemented for `time::offset_date_time::OffsetDateTime`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `Encode<'q, DB>`:\n  <bool as Encode<'q, sqlx::Sqlite>>\n  <bool as Encode<'_, sqlx::Postgres>>\n  <bool as Encode<'_, sqlx::MySql>>\n  <i8 as Encode<'q, sqlx::Sqlite>>\n  <i8 as Encode<'_, sqlx::Postgres>>\n  <i8 as Encode<'_, sqlx::MySql>>\n  <i16 as Encode<'q, sqlx::Sqlite>>\n  <i16 as Encode<'_, sqlx::Postgres>>\nand 52 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&time::offset_date_time::OffsetDateTime` to implement `Encode<'_, sqlx::MySql>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"1 redundant requirement hidden","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&time::offset_date_time::OffsetDateTime>` to implement `Encode<'_, sqlx::MySql>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs","byte_start":1595,"byte_end":1609,"line_start":54,"line_end":54,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `time::offset_date_time::OffsetDateTime: Encode<'_, sqlx::MySql>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_mysql!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Encode<'_, sqlx::MySql>` is not implemented for `time::offset_date_time::OffsetDateTime`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `Encode<'q, DB>`:\u001b[0m\n\u001b[0m             <bool as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i16 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m           and 52 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&time::offset_date_time::OffsetDateTime` to implement `Encode<'_, sqlx::MySql>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: 1 redundant requirement hidden\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&time::offset_date_time::OffsetDateTime>` to implement `Encode<'_, sqlx::MySql>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs:54:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `time::offset_date_time::OffsetDateTime: sqlx::Type<sqlx::MySql>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":"the trait `sqlx::Type<sqlx::MySql>` is not implemented for `time::offset_date_time::OffsetDateTime`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `sqlx::Type<DB>`:\n  <bool as sqlx::Type<sqlx::Postgres>>\n  <bool as sqlx::Type<sqlx::Sqlite>>\n  <bool as sqlx::Type<sqlx::MySql>>\n  <i8 as sqlx::Type<sqlx::Postgres>>\n  <i8 as sqlx::Type<sqlx::Sqlite>>\n  <i8 as sqlx::Type<sqlx::MySql>>\n  <i16 as sqlx::Type<sqlx::Postgres>>\n  <i16 as sqlx::Type<sqlx::Sqlite>>\nand 60 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&time::offset_date_time::OffsetDateTime` to implement `sqlx::Type<sqlx::MySql>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&time::offset_date_time::OffsetDateTime>` to implement `Encode<'_, sqlx::MySql>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs","byte_start":1595,"byte_end":1609,"line_start":54,"line_end":54,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `time::offset_date_time::OffsetDateTime: sqlx::Type<sqlx::MySql>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_mysql!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `sqlx::Type<sqlx::MySql>` is not implemented for `time::offset_date_time::OffsetDateTime`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `sqlx::Type<DB>`:\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m           and 60 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&time::offset_date_time::OffsetDateTime` to implement `sqlx::Type<sqlx::MySql>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&time::offset_date_time::OffsetDateTime>` to implement `Encode<'_, sqlx::MySql>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs:54:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `uuid::Uuid: Encode<'_, sqlx::MySql>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":"the trait `Encode<'_, sqlx::MySql>` is not implemented for `uuid::Uuid`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `Encode<'q, DB>`:\n  <bool as Encode<'q, sqlx::Sqlite>>\n  <bool as Encode<'_, sqlx::Postgres>>\n  <bool as Encode<'_, sqlx::MySql>>\n  <i8 as Encode<'q, sqlx::Sqlite>>\n  <i8 as Encode<'_, sqlx::Postgres>>\n  <i8 as Encode<'_, sqlx::MySql>>\n  <i16 as Encode<'q, sqlx::Sqlite>>\n  <i16 as Encode<'_, sqlx::Postgres>>\nand 52 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&uuid::Uuid` to implement `Encode<'_, sqlx::MySql>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"1 redundant requirement hidden","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&uuid::Uuid>` to implement `Encode<'_, sqlx::MySql>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs","byte_start":1595,"byte_end":1609,"line_start":54,"line_end":54,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `uuid::Uuid: Encode<'_, sqlx::MySql>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_mysql!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Encode<'_, sqlx::MySql>` is not implemented for `uuid::Uuid`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `Encode<'q, DB>`:\u001b[0m\n\u001b[0m             <bool as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i16 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m           and 52 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&uuid::Uuid` to implement `Encode<'_, sqlx::MySql>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: 1 redundant requirement hidden\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&uuid::Uuid>` to implement `Encode<'_, sqlx::MySql>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs:54:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `uuid::Uuid: sqlx::Type<sqlx::MySql>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":"the trait `sqlx::Type<sqlx::MySql>` is not implemented for `uuid::Uuid`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `sqlx::Type<DB>`:\n  <bool as sqlx::Type<sqlx::Postgres>>\n  <bool as sqlx::Type<sqlx::Sqlite>>\n  <bool as sqlx::Type<sqlx::MySql>>\n  <i8 as sqlx::Type<sqlx::Postgres>>\n  <i8 as sqlx::Type<sqlx::Sqlite>>\n  <i8 as sqlx::Type<sqlx::MySql>>\n  <i16 as sqlx::Type<sqlx::Postgres>>\n  <i16 as sqlx::Type<sqlx::Sqlite>>\nand 60 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&uuid::Uuid` to implement `sqlx::Type<sqlx::MySql>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&uuid::Uuid>` to implement `Encode<'_, sqlx::MySql>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs","byte_start":1595,"byte_end":1609,"line_start":54,"line_end":54,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `uuid::Uuid: sqlx::Type<sqlx::MySql>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_mysql!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `sqlx::Type<sqlx::MySql>` is not implemented for `uuid::Uuid`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `sqlx::Type<DB>`:\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m           and 60 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&uuid::Uuid` to implement `sqlx::Type<sqlx::MySql>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&uuid::Uuid>` to implement `Encode<'_, sqlx::MySql>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs:54:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `rust_decimal::decimal::Decimal: Encode<'_, sqlx::MySql>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":"the trait `Encode<'_, sqlx::MySql>` is not implemented for `rust_decimal::decimal::Decimal`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `Encode<'q, DB>`:\n  <bool as Encode<'q, sqlx::Sqlite>>\n  <bool as Encode<'_, sqlx::Postgres>>\n  <bool as Encode<'_, sqlx::MySql>>\n  <i8 as Encode<'q, sqlx::Sqlite>>\n  <i8 as Encode<'_, sqlx::Postgres>>\n  <i8 as Encode<'_, sqlx::MySql>>\n  <i16 as Encode<'q, sqlx::Sqlite>>\n  <i16 as Encode<'_, sqlx::Postgres>>\nand 52 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&rust_decimal::decimal::Decimal` to implement `Encode<'_, sqlx::MySql>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"1 redundant requirement hidden","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&rust_decimal::decimal::Decimal>` to implement `Encode<'_, sqlx::MySql>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs","byte_start":1595,"byte_end":1609,"line_start":54,"line_end":54,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `rust_decimal::decimal::Decimal: Encode<'_, sqlx::MySql>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_mysql!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Encode<'_, sqlx::MySql>` is not implemented for `rust_decimal::decimal::Decimal`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `Encode<'q, DB>`:\u001b[0m\n\u001b[0m             <bool as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i16 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m           and 52 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&rust_decimal::decimal::Decimal` to implement `Encode<'_, sqlx::MySql>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: 1 redundant requirement hidden\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&rust_decimal::decimal::Decimal>` to implement `Encode<'_, sqlx::MySql>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs:54:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `rust_decimal::decimal::Decimal: sqlx::Type<sqlx::MySql>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":"the trait `sqlx::Type<sqlx::MySql>` is not implemented for `rust_decimal::decimal::Decimal`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs","byte_start":94,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_mysql!();","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `sqlx::Type<DB>`:\n  <bool as sqlx::Type<sqlx::Postgres>>\n  <bool as sqlx::Type<sqlx::Sqlite>>\n  <bool as sqlx::Type<sqlx::MySql>>\n  <i8 as sqlx::Type<sqlx::Postgres>>\n  <i8 as sqlx::Type<sqlx::Sqlite>>\n  <i8 as sqlx::Type<sqlx::MySql>>\n  <i16 as sqlx::Type<sqlx::Postgres>>\n  <i16 as sqlx::Type<sqlx::Sqlite>>\nand 60 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&rust_decimal::decimal::Decimal` to implement `sqlx::Type<sqlx::MySql>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&rust_decimal::decimal::Decimal>` to implement `Encode<'_, sqlx::MySql>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs","byte_start":1595,"byte_end":1609,"line_start":54,"line_end":54,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `rust_decimal::decimal::Decimal: sqlx::Type<sqlx::MySql>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/mysql/discovery/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_mysql!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `sqlx::Type<sqlx::MySql>` is not implemented for `rust_decimal::decimal::Decimal`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `sqlx::Type<DB>`:\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m           and 60 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&rust_decimal::decimal::Decimal` to implement `sqlx::Type<sqlx::MySql>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&rust_decimal::decimal::Decimal>` to implement `Encode<'_, sqlx::MySql>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs:54:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `chrono::naive::date::NaiveDate: Encode<'_, sqlx::Postgres>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":"the trait `Encode<'_, sqlx::Postgres>` is not implemented for `chrono::naive::date::NaiveDate`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `Encode<'q, DB>`:\n  <bool as Encode<'q, sqlx::Sqlite>>\n  <bool as Encode<'_, sqlx::Postgres>>\n  <bool as Encode<'_, sqlx::MySql>>\n  <i8 as Encode<'q, sqlx::Sqlite>>\n  <i8 as Encode<'_, sqlx::Postgres>>\n  <i8 as Encode<'_, sqlx::MySql>>\n  <i16 as Encode<'q, sqlx::Sqlite>>\n  <i16 as Encode<'_, sqlx::Postgres>>\nand 52 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&chrono::naive::date::NaiveDate` to implement `Encode<'_, sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"1 redundant requirement hidden","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&chrono::naive::date::NaiveDate>` to implement `Encode<'_, sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs","byte_start":2895,"byte_end":2909,"line_start":79,"line_end":79,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `chrono::naive::date::NaiveDate: Encode<'_, sqlx::Postgres>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_postgres!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Encode<'_, sqlx::Postgres>` is not implemented for `chrono::naive::date::NaiveDate`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `Encode<'q, DB>`:\u001b[0m\n\u001b[0m             <bool as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i16 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m           and 52 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&chrono::naive::date::NaiveDate` to implement `Encode<'_, sqlx::Postgres>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: 1 redundant requirement hidden\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&chrono::naive::date::NaiveDate>` to implement `Encode<'_, sqlx::Postgres>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs:79:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m79\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `chrono::naive::date::NaiveDate: sqlx::Type<sqlx::Postgres>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":"the trait `sqlx::Type<sqlx::Postgres>` is not implemented for `chrono::naive::date::NaiveDate`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `sqlx::Type<DB>`:\n  <bool as sqlx::Type<sqlx::Postgres>>\n  <bool as sqlx::Type<sqlx::Sqlite>>\n  <bool as sqlx::Type<sqlx::MySql>>\n  <i8 as sqlx::Type<sqlx::Postgres>>\n  <i8 as sqlx::Type<sqlx::Sqlite>>\n  <i8 as sqlx::Type<sqlx::MySql>>\n  <i16 as sqlx::Type<sqlx::Postgres>>\n  <i16 as sqlx::Type<sqlx::Sqlite>>\nand 60 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&chrono::naive::date::NaiveDate` to implement `sqlx::Type<sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&chrono::naive::date::NaiveDate>` to implement `Encode<'_, sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs","byte_start":2895,"byte_end":2909,"line_start":79,"line_end":79,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `chrono::naive::date::NaiveDate: sqlx::Type<sqlx::Postgres>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_postgres!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `sqlx::Type<sqlx::Postgres>` is not implemented for `chrono::naive::date::NaiveDate`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `sqlx::Type<DB>`:\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m           and 60 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&chrono::naive::date::NaiveDate` to implement `sqlx::Type<sqlx::Postgres>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&chrono::naive::date::NaiveDate>` to implement `Encode<'_, sqlx::Postgres>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs:79:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m79\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `chrono::naive::time::NaiveTime: Encode<'_, sqlx::Postgres>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":"the trait `Encode<'_, sqlx::Postgres>` is not implemented for `chrono::naive::time::NaiveTime`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `Encode<'q, DB>`:\n  <bool as Encode<'q, sqlx::Sqlite>>\n  <bool as Encode<'_, sqlx::Postgres>>\n  <bool as Encode<'_, sqlx::MySql>>\n  <i8 as Encode<'q, sqlx::Sqlite>>\n  <i8 as Encode<'_, sqlx::Postgres>>\n  <i8 as Encode<'_, sqlx::MySql>>\n  <i16 as Encode<'q, sqlx::Sqlite>>\n  <i16 as Encode<'_, sqlx::Postgres>>\nand 52 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&chrono::naive::time::NaiveTime` to implement `Encode<'_, sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"1 redundant requirement hidden","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&chrono::naive::time::NaiveTime>` to implement `Encode<'_, sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs","byte_start":2895,"byte_end":2909,"line_start":79,"line_end":79,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `chrono::naive::time::NaiveTime: Encode<'_, sqlx::Postgres>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_postgres!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Encode<'_, sqlx::Postgres>` is not implemented for `chrono::naive::time::NaiveTime`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `Encode<'q, DB>`:\u001b[0m\n\u001b[0m             <bool as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i16 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m           and 52 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&chrono::naive::time::NaiveTime` to implement `Encode<'_, sqlx::Postgres>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: 1 redundant requirement hidden\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&chrono::naive::time::NaiveTime>` to implement `Encode<'_, sqlx::Postgres>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs:79:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m79\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `chrono::naive::time::NaiveTime: sqlx::Type<sqlx::Postgres>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":"the trait `sqlx::Type<sqlx::Postgres>` is not implemented for `chrono::naive::time::NaiveTime`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `sqlx::Type<DB>`:\n  <bool as sqlx::Type<sqlx::Postgres>>\n  <bool as sqlx::Type<sqlx::Sqlite>>\n  <bool as sqlx::Type<sqlx::MySql>>\n  <i8 as sqlx::Type<sqlx::Postgres>>\n  <i8 as sqlx::Type<sqlx::Sqlite>>\n  <i8 as sqlx::Type<sqlx::MySql>>\n  <i16 as sqlx::Type<sqlx::Postgres>>\n  <i16 as sqlx::Type<sqlx::Sqlite>>\nand 60 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&chrono::naive::time::NaiveTime` to implement `sqlx::Type<sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&chrono::naive::time::NaiveTime>` to implement `Encode<'_, sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs","byte_start":2895,"byte_end":2909,"line_start":79,"line_end":79,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `chrono::naive::time::NaiveTime: sqlx::Type<sqlx::Postgres>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_postgres!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `sqlx::Type<sqlx::Postgres>` is not implemented for `chrono::naive::time::NaiveTime`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `sqlx::Type<DB>`:\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m           and 60 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&chrono::naive::time::NaiveTime` to implement `sqlx::Type<sqlx::Postgres>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&chrono::naive::time::NaiveTime>` to implement `Encode<'_, sqlx::Postgres>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs:79:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m79\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `chrono::naive::datetime::NaiveDateTime: Encode<'_, sqlx::Postgres>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":"the trait `Encode<'_, sqlx::Postgres>` is not implemented for `chrono::naive::datetime::NaiveDateTime`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `Encode<'q, DB>`:\n  <bool as Encode<'q, sqlx::Sqlite>>\n  <bool as Encode<'_, sqlx::Postgres>>\n  <bool as Encode<'_, sqlx::MySql>>\n  <i8 as Encode<'q, sqlx::Sqlite>>\n  <i8 as Encode<'_, sqlx::Postgres>>\n  <i8 as Encode<'_, sqlx::MySql>>\n  <i16 as Encode<'q, sqlx::Sqlite>>\n  <i16 as Encode<'_, sqlx::Postgres>>\nand 52 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&chrono::naive::datetime::NaiveDateTime` to implement `Encode<'_, sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"1 redundant requirement hidden","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&chrono::naive::datetime::NaiveDateTime>` to implement `Encode<'_, sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs","byte_start":2895,"byte_end":2909,"line_start":79,"line_end":79,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `chrono::naive::datetime::NaiveDateTime: Encode<'_, sqlx::Postgres>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_postgres!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Encode<'_, sqlx::Postgres>` is not implemented for `chrono::naive::datetime::NaiveDateTime`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `Encode<'q, DB>`:\u001b[0m\n\u001b[0m             <bool as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i16 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m           and 52 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&chrono::naive::datetime::NaiveDateTime` to implement `Encode<'_, sqlx::Postgres>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: 1 redundant requirement hidden\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&chrono::naive::datetime::NaiveDateTime>` to implement `Encode<'_, sqlx::Postgres>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs:79:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m79\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `chrono::naive::datetime::NaiveDateTime: sqlx::Type<sqlx::Postgres>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":"the trait `sqlx::Type<sqlx::Postgres>` is not implemented for `chrono::naive::datetime::NaiveDateTime`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `sqlx::Type<DB>`:\n  <bool as sqlx::Type<sqlx::Postgres>>\n  <bool as sqlx::Type<sqlx::Sqlite>>\n  <bool as sqlx::Type<sqlx::MySql>>\n  <i8 as sqlx::Type<sqlx::Postgres>>\n  <i8 as sqlx::Type<sqlx::Sqlite>>\n  <i8 as sqlx::Type<sqlx::MySql>>\n  <i16 as sqlx::Type<sqlx::Postgres>>\n  <i16 as sqlx::Type<sqlx::Sqlite>>\nand 60 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&chrono::naive::datetime::NaiveDateTime` to implement `sqlx::Type<sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&chrono::naive::datetime::NaiveDateTime>` to implement `Encode<'_, sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs","byte_start":2895,"byte_end":2909,"line_start":79,"line_end":79,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `chrono::naive::datetime::NaiveDateTime: sqlx::Type<sqlx::Postgres>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_postgres!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `sqlx::Type<sqlx::Postgres>` is not implemented for `chrono::naive::datetime::NaiveDateTime`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `sqlx::Type<DB>`:\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m           and 60 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&chrono::naive::datetime::NaiveDateTime` to implement `sqlx::Type<sqlx::Postgres>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&chrono::naive::datetime::NaiveDateTime>` to implement `Encode<'_, sqlx::Postgres>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs:79:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m79\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `chrono::datetime::DateTime<chrono::offset::utc::Utc>: Encode<'_, sqlx::Postgres>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":"the trait `Encode<'_, sqlx::Postgres>` is not implemented for `chrono::datetime::DateTime<chrono::offset::utc::Utc>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `Encode<'q, DB>`:\n  <bool as Encode<'q, sqlx::Sqlite>>\n  <bool as Encode<'_, sqlx::Postgres>>\n  <bool as Encode<'_, sqlx::MySql>>\n  <i8 as Encode<'q, sqlx::Sqlite>>\n  <i8 as Encode<'_, sqlx::Postgres>>\n  <i8 as Encode<'_, sqlx::MySql>>\n  <i16 as Encode<'q, sqlx::Sqlite>>\n  <i16 as Encode<'_, sqlx::Postgres>>\nand 52 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&chrono::datetime::DateTime<chrono::offset::utc::Utc>` to implement `Encode<'_, sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"1 redundant requirement hidden","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&chrono::datetime::DateTime<chrono::offset::utc::Utc>>` to implement `Encode<'_, sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs","byte_start":2895,"byte_end":2909,"line_start":79,"line_end":79,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `chrono::datetime::DateTime<chrono::offset::utc::Utc>: Encode<'_, sqlx::Postgres>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_postgres!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Encode<'_, sqlx::Postgres>` is not implemented for `chrono::datetime::DateTime<chrono::offset::utc::Utc>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `Encode<'q, DB>`:\u001b[0m\n\u001b[0m             <bool as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i16 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m           and 52 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&chrono::datetime::DateTime<chrono::offset::utc::Utc>` to implement `Encode<'_, sqlx::Postgres>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: 1 redundant requirement hidden\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&chrono::datetime::DateTime<chrono::offset::utc::Utc>>` to implement `Encode<'_, sqlx::Postgres>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs:79:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m79\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `chrono::datetime::DateTime<chrono::offset::utc::Utc>: sqlx::Type<sqlx::Postgres>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":"the trait `sqlx::Type<sqlx::Postgres>` is not implemented for `chrono::datetime::DateTime<chrono::offset::utc::Utc>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `sqlx::Type<DB>`:\n  <bool as sqlx::Type<sqlx::Postgres>>\n  <bool as sqlx::Type<sqlx::Sqlite>>\n  <bool as sqlx::Type<sqlx::MySql>>\n  <i8 as sqlx::Type<sqlx::Postgres>>\n  <i8 as sqlx::Type<sqlx::Sqlite>>\n  <i8 as sqlx::Type<sqlx::MySql>>\n  <i16 as sqlx::Type<sqlx::Postgres>>\n  <i16 as sqlx::Type<sqlx::Sqlite>>\nand 60 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&chrono::datetime::DateTime<chrono::offset::utc::Utc>` to implement `sqlx::Type<sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&chrono::datetime::DateTime<chrono::offset::utc::Utc>>` to implement `Encode<'_, sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs","byte_start":2895,"byte_end":2909,"line_start":79,"line_end":79,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `chrono::datetime::DateTime<chrono::offset::utc::Utc>: sqlx::Type<sqlx::Postgres>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_postgres!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `sqlx::Type<sqlx::Postgres>` is not implemented for `chrono::datetime::DateTime<chrono::offset::utc::Utc>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `sqlx::Type<DB>`:\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m           and 60 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&chrono::datetime::DateTime<chrono::offset::utc::Utc>` to implement `sqlx::Type<sqlx::Postgres>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&chrono::datetime::DateTime<chrono::offset::utc::Utc>>` to implement `Encode<'_, sqlx::Postgres>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs:79:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m79\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `chrono::datetime::DateTime<chrono::offset::local::Local>: Encode<'_, sqlx::Postgres>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":"the trait `Encode<'_, sqlx::Postgres>` is not implemented for `chrono::datetime::DateTime<chrono::offset::local::Local>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `Encode<'q, DB>`:\n  <bool as Encode<'q, sqlx::Sqlite>>\n  <bool as Encode<'_, sqlx::Postgres>>\n  <bool as Encode<'_, sqlx::MySql>>\n  <i8 as Encode<'q, sqlx::Sqlite>>\n  <i8 as Encode<'_, sqlx::Postgres>>\n  <i8 as Encode<'_, sqlx::MySql>>\n  <i16 as Encode<'q, sqlx::Sqlite>>\n  <i16 as Encode<'_, sqlx::Postgres>>\nand 52 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&chrono::datetime::DateTime<chrono::offset::local::Local>` to implement `Encode<'_, sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"1 redundant requirement hidden","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&chrono::datetime::DateTime<chrono::offset::local::Local>>` to implement `Encode<'_, sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs","byte_start":2895,"byte_end":2909,"line_start":79,"line_end":79,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `chrono::datetime::DateTime<chrono::offset::local::Local>: Encode<'_, sqlx::Postgres>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_postgres!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Encode<'_, sqlx::Postgres>` is not implemented for `chrono::datetime::DateTime<chrono::offset::local::Local>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `Encode<'q, DB>`:\u001b[0m\n\u001b[0m             <bool as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i16 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m           and 52 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&chrono::datetime::DateTime<chrono::offset::local::Local>` to implement `Encode<'_, sqlx::Postgres>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: 1 redundant requirement hidden\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&chrono::datetime::DateTime<chrono::offset::local::Local>>` to implement `Encode<'_, sqlx::Postgres>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs:79:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m79\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `chrono::datetime::DateTime<chrono::offset::local::Local>: sqlx::Type<sqlx::Postgres>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":"the trait `sqlx::Type<sqlx::Postgres>` is not implemented for `chrono::datetime::DateTime<chrono::offset::local::Local>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `sqlx::Type<DB>`:\n  <bool as sqlx::Type<sqlx::Postgres>>\n  <bool as sqlx::Type<sqlx::Sqlite>>\n  <bool as sqlx::Type<sqlx::MySql>>\n  <i8 as sqlx::Type<sqlx::Postgres>>\n  <i8 as sqlx::Type<sqlx::Sqlite>>\n  <i8 as sqlx::Type<sqlx::MySql>>\n  <i16 as sqlx::Type<sqlx::Postgres>>\n  <i16 as sqlx::Type<sqlx::Sqlite>>\nand 60 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&chrono::datetime::DateTime<chrono::offset::local::Local>` to implement `sqlx::Type<sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&chrono::datetime::DateTime<chrono::offset::local::Local>>` to implement `Encode<'_, sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs","byte_start":2895,"byte_end":2909,"line_start":79,"line_end":79,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `chrono::datetime::DateTime<chrono::offset::local::Local>: sqlx::Type<sqlx::Postgres>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_postgres!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `sqlx::Type<sqlx::Postgres>` is not implemented for `chrono::datetime::DateTime<chrono::offset::local::Local>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `sqlx::Type<DB>`:\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m           and 60 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&chrono::datetime::DateTime<chrono::offset::local::Local>` to implement `sqlx::Type<sqlx::Postgres>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&chrono::datetime::DateTime<chrono::offset::local::Local>>` to implement `Encode<'_, sqlx::Postgres>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs:79:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m79\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `chrono::datetime::DateTime<chrono::offset::fixed::FixedOffset>: Encode<'_, sqlx::Postgres>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":"the trait `Encode<'_, sqlx::Postgres>` is not implemented for `chrono::datetime::DateTime<chrono::offset::fixed::FixedOffset>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `Encode<'q, DB>`:\n  <bool as Encode<'q, sqlx::Sqlite>>\n  <bool as Encode<'_, sqlx::Postgres>>\n  <bool as Encode<'_, sqlx::MySql>>\n  <i8 as Encode<'q, sqlx::Sqlite>>\n  <i8 as Encode<'_, sqlx::Postgres>>\n  <i8 as Encode<'_, sqlx::MySql>>\n  <i16 as Encode<'q, sqlx::Sqlite>>\n  <i16 as Encode<'_, sqlx::Postgres>>\nand 52 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&chrono::datetime::DateTime<chrono::offset::fixed::FixedOffset>` to implement `Encode<'_, sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"1 redundant requirement hidden","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&chrono::datetime::DateTime<chrono::offset::fixed::FixedOffset>>` to implement `Encode<'_, sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs","byte_start":2895,"byte_end":2909,"line_start":79,"line_end":79,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `chrono::datetime::DateTime<chrono::offset::fixed::FixedOffset>: Encode<'_, sqlx::Postgres>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_postgres!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Encode<'_, sqlx::Postgres>` is not implemented for `chrono::datetime::DateTime<chrono::offset::fixed::FixedOffset>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `Encode<'q, DB>`:\u001b[0m\n\u001b[0m             <bool as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i16 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m           and 52 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&chrono::datetime::DateTime<chrono::offset::fixed::FixedOffset>` to implement `Encode<'_, sqlx::Postgres>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: 1 redundant requirement hidden\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&chrono::datetime::DateTime<chrono::offset::fixed::FixedOffset>>` to implement `Encode<'_, sqlx::Postgres>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs:79:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m79\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `chrono::datetime::DateTime<chrono::offset::fixed::FixedOffset>: sqlx::Type<sqlx::Postgres>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":"the trait `sqlx::Type<sqlx::Postgres>` is not implemented for `chrono::datetime::DateTime<chrono::offset::fixed::FixedOffset>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `sqlx::Type<DB>`:\n  <bool as sqlx::Type<sqlx::Postgres>>\n  <bool as sqlx::Type<sqlx::Sqlite>>\n  <bool as sqlx::Type<sqlx::MySql>>\n  <i8 as sqlx::Type<sqlx::Postgres>>\n  <i8 as sqlx::Type<sqlx::Sqlite>>\n  <i8 as sqlx::Type<sqlx::MySql>>\n  <i16 as sqlx::Type<sqlx::Postgres>>\n  <i16 as sqlx::Type<sqlx::Sqlite>>\nand 60 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&chrono::datetime::DateTime<chrono::offset::fixed::FixedOffset>` to implement `sqlx::Type<sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&chrono::datetime::DateTime<chrono::offset::fixed::FixedOffset>>` to implement `Encode<'_, sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs","byte_start":2895,"byte_end":2909,"line_start":79,"line_end":79,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `chrono::datetime::DateTime<chrono::offset::fixed::FixedOffset>: sqlx::Type<sqlx::Postgres>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_postgres!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `sqlx::Type<sqlx::Postgres>` is not implemented for `chrono::datetime::DateTime<chrono::offset::fixed::FixedOffset>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `sqlx::Type<DB>`:\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m           and 60 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&chrono::datetime::DateTime<chrono::offset::fixed::FixedOffset>` to implement `sqlx::Type<sqlx::Postgres>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&chrono::datetime::DateTime<chrono::offset::fixed::FixedOffset>>` to implement `Encode<'_, sqlx::Postgres>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs:79:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m79\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `time::date::Date: Encode<'_, sqlx::Postgres>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":"the trait `Encode<'_, sqlx::Postgres>` is not implemented for `time::date::Date`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `Encode<'q, DB>`:\n  <bool as Encode<'q, sqlx::Sqlite>>\n  <bool as Encode<'_, sqlx::Postgres>>\n  <bool as Encode<'_, sqlx::MySql>>\n  <i8 as Encode<'q, sqlx::Sqlite>>\n  <i8 as Encode<'_, sqlx::Postgres>>\n  <i8 as Encode<'_, sqlx::MySql>>\n  <i16 as Encode<'q, sqlx::Sqlite>>\n  <i16 as Encode<'_, sqlx::Postgres>>\nand 52 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&time::date::Date` to implement `Encode<'_, sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"1 redundant requirement hidden","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&time::date::Date>` to implement `Encode<'_, sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs","byte_start":2895,"byte_end":2909,"line_start":79,"line_end":79,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `time::date::Date: Encode<'_, sqlx::Postgres>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_postgres!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Encode<'_, sqlx::Postgres>` is not implemented for `time::date::Date`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `Encode<'q, DB>`:\u001b[0m\n\u001b[0m             <bool as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i16 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m           and 52 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&time::date::Date` to implement `Encode<'_, sqlx::Postgres>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: 1 redundant requirement hidden\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&time::date::Date>` to implement `Encode<'_, sqlx::Postgres>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs:79:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m79\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `time::date::Date: sqlx::Type<sqlx::Postgres>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":"the trait `sqlx::Type<sqlx::Postgres>` is not implemented for `time::date::Date`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `sqlx::Type<DB>`:\n  <bool as sqlx::Type<sqlx::Postgres>>\n  <bool as sqlx::Type<sqlx::Sqlite>>\n  <bool as sqlx::Type<sqlx::MySql>>\n  <i8 as sqlx::Type<sqlx::Postgres>>\n  <i8 as sqlx::Type<sqlx::Sqlite>>\n  <i8 as sqlx::Type<sqlx::MySql>>\n  <i16 as sqlx::Type<sqlx::Postgres>>\n  <i16 as sqlx::Type<sqlx::Sqlite>>\nand 60 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&time::date::Date` to implement `sqlx::Type<sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&time::date::Date>` to implement `Encode<'_, sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs","byte_start":2895,"byte_end":2909,"line_start":79,"line_end":79,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `time::date::Date: sqlx::Type<sqlx::Postgres>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_postgres!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `sqlx::Type<sqlx::Postgres>` is not implemented for `time::date::Date`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `sqlx::Type<DB>`:\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m           and 60 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&time::date::Date` to implement `sqlx::Type<sqlx::Postgres>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&time::date::Date>` to implement `Encode<'_, sqlx::Postgres>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs:79:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m79\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `time::time_mod::Time: Encode<'_, sqlx::Postgres>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":"the trait `Encode<'_, sqlx::Postgres>` is not implemented for `time::time_mod::Time`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `Encode<'q, DB>`:\n  <bool as Encode<'q, sqlx::Sqlite>>\n  <bool as Encode<'_, sqlx::Postgres>>\n  <bool as Encode<'_, sqlx::MySql>>\n  <i8 as Encode<'q, sqlx::Sqlite>>\n  <i8 as Encode<'_, sqlx::Postgres>>\n  <i8 as Encode<'_, sqlx::MySql>>\n  <i16 as Encode<'q, sqlx::Sqlite>>\n  <i16 as Encode<'_, sqlx::Postgres>>\nand 52 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&time::time_mod::Time` to implement `Encode<'_, sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"1 redundant requirement hidden","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&time::time_mod::Time>` to implement `Encode<'_, sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs","byte_start":2895,"byte_end":2909,"line_start":79,"line_end":79,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `time::time_mod::Time: Encode<'_, sqlx::Postgres>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_postgres!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Encode<'_, sqlx::Postgres>` is not implemented for `time::time_mod::Time`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `Encode<'q, DB>`:\u001b[0m\n\u001b[0m             <bool as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i16 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m           and 52 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&time::time_mod::Time` to implement `Encode<'_, sqlx::Postgres>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: 1 redundant requirement hidden\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&time::time_mod::Time>` to implement `Encode<'_, sqlx::Postgres>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs:79:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m79\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `time::time_mod::Time: sqlx::Type<sqlx::Postgres>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":"the trait `sqlx::Type<sqlx::Postgres>` is not implemented for `time::time_mod::Time`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `sqlx::Type<DB>`:\n  <bool as sqlx::Type<sqlx::Postgres>>\n  <bool as sqlx::Type<sqlx::Sqlite>>\n  <bool as sqlx::Type<sqlx::MySql>>\n  <i8 as sqlx::Type<sqlx::Postgres>>\n  <i8 as sqlx::Type<sqlx::Sqlite>>\n  <i8 as sqlx::Type<sqlx::MySql>>\n  <i16 as sqlx::Type<sqlx::Postgres>>\n  <i16 as sqlx::Type<sqlx::Sqlite>>\nand 60 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&time::time_mod::Time` to implement `sqlx::Type<sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&time::time_mod::Time>` to implement `Encode<'_, sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs","byte_start":2895,"byte_end":2909,"line_start":79,"line_end":79,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `time::time_mod::Time: sqlx::Type<sqlx::Postgres>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_postgres!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `sqlx::Type<sqlx::Postgres>` is not implemented for `time::time_mod::Time`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `sqlx::Type<DB>`:\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m           and 60 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&time::time_mod::Time` to implement `sqlx::Type<sqlx::Postgres>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&time::time_mod::Time>` to implement `Encode<'_, sqlx::Postgres>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs:79:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m79\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `time::primitive_date_time::PrimitiveDateTime: Encode<'_, sqlx::Postgres>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":"the trait `Encode<'_, sqlx::Postgres>` is not implemented for `time::primitive_date_time::PrimitiveDateTime`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `Encode<'q, DB>`:\n  <bool as Encode<'q, sqlx::Sqlite>>\n  <bool as Encode<'_, sqlx::Postgres>>\n  <bool as Encode<'_, sqlx::MySql>>\n  <i8 as Encode<'q, sqlx::Sqlite>>\n  <i8 as Encode<'_, sqlx::Postgres>>\n  <i8 as Encode<'_, sqlx::MySql>>\n  <i16 as Encode<'q, sqlx::Sqlite>>\n  <i16 as Encode<'_, sqlx::Postgres>>\nand 52 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&time::primitive_date_time::PrimitiveDateTime` to implement `Encode<'_, sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"1 redundant requirement hidden","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&time::primitive_date_time::PrimitiveDateTime>` to implement `Encode<'_, sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs","byte_start":2895,"byte_end":2909,"line_start":79,"line_end":79,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `time::primitive_date_time::PrimitiveDateTime: Encode<'_, sqlx::Postgres>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_postgres!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Encode<'_, sqlx::Postgres>` is not implemented for `time::primitive_date_time::PrimitiveDateTime`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `Encode<'q, DB>`:\u001b[0m\n\u001b[0m             <bool as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i16 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m           and 52 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&time::primitive_date_time::PrimitiveDateTime` to implement `Encode<'_, sqlx::Postgres>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: 1 redundant requirement hidden\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&time::primitive_date_time::PrimitiveDateTime>` to implement `Encode<'_, sqlx::Postgres>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs:79:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m79\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `time::primitive_date_time::PrimitiveDateTime: sqlx::Type<sqlx::Postgres>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":"the trait `sqlx::Type<sqlx::Postgres>` is not implemented for `time::primitive_date_time::PrimitiveDateTime`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `sqlx::Type<DB>`:\n  <bool as sqlx::Type<sqlx::Postgres>>\n  <bool as sqlx::Type<sqlx::Sqlite>>\n  <bool as sqlx::Type<sqlx::MySql>>\n  <i8 as sqlx::Type<sqlx::Postgres>>\n  <i8 as sqlx::Type<sqlx::Sqlite>>\n  <i8 as sqlx::Type<sqlx::MySql>>\n  <i16 as sqlx::Type<sqlx::Postgres>>\n  <i16 as sqlx::Type<sqlx::Sqlite>>\nand 60 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&time::primitive_date_time::PrimitiveDateTime` to implement `sqlx::Type<sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&time::primitive_date_time::PrimitiveDateTime>` to implement `Encode<'_, sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs","byte_start":2895,"byte_end":2909,"line_start":79,"line_end":79,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `time::primitive_date_time::PrimitiveDateTime: sqlx::Type<sqlx::Postgres>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_postgres!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `sqlx::Type<sqlx::Postgres>` is not implemented for `time::primitive_date_time::PrimitiveDateTime`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `sqlx::Type<DB>`:\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m           and 60 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&time::primitive_date_time::PrimitiveDateTime` to implement `sqlx::Type<sqlx::Postgres>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&time::primitive_date_time::PrimitiveDateTime>` to implement `Encode<'_, sqlx::Postgres>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs:79:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m79\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `time::offset_date_time::OffsetDateTime: Encode<'_, sqlx::Postgres>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":"the trait `Encode<'_, sqlx::Postgres>` is not implemented for `time::offset_date_time::OffsetDateTime`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `Encode<'q, DB>`:\n  <bool as Encode<'q, sqlx::Sqlite>>\n  <bool as Encode<'_, sqlx::Postgres>>\n  <bool as Encode<'_, sqlx::MySql>>\n  <i8 as Encode<'q, sqlx::Sqlite>>\n  <i8 as Encode<'_, sqlx::Postgres>>\n  <i8 as Encode<'_, sqlx::MySql>>\n  <i16 as Encode<'q, sqlx::Sqlite>>\n  <i16 as Encode<'_, sqlx::Postgres>>\nand 52 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&time::offset_date_time::OffsetDateTime` to implement `Encode<'_, sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"1 redundant requirement hidden","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&time::offset_date_time::OffsetDateTime>` to implement `Encode<'_, sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs","byte_start":2895,"byte_end":2909,"line_start":79,"line_end":79,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `time::offset_date_time::OffsetDateTime: Encode<'_, sqlx::Postgres>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_postgres!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Encode<'_, sqlx::Postgres>` is not implemented for `time::offset_date_time::OffsetDateTime`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `Encode<'q, DB>`:\u001b[0m\n\u001b[0m             <bool as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i16 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m           and 52 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&time::offset_date_time::OffsetDateTime` to implement `Encode<'_, sqlx::Postgres>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: 1 redundant requirement hidden\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&time::offset_date_time::OffsetDateTime>` to implement `Encode<'_, sqlx::Postgres>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs:79:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m79\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `time::offset_date_time::OffsetDateTime: sqlx::Type<sqlx::Postgres>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":"the trait `sqlx::Type<sqlx::Postgres>` is not implemented for `time::offset_date_time::OffsetDateTime`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `sqlx::Type<DB>`:\n  <bool as sqlx::Type<sqlx::Postgres>>\n  <bool as sqlx::Type<sqlx::Sqlite>>\n  <bool as sqlx::Type<sqlx::MySql>>\n  <i8 as sqlx::Type<sqlx::Postgres>>\n  <i8 as sqlx::Type<sqlx::Sqlite>>\n  <i8 as sqlx::Type<sqlx::MySql>>\n  <i16 as sqlx::Type<sqlx::Postgres>>\n  <i16 as sqlx::Type<sqlx::Sqlite>>\nand 60 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&time::offset_date_time::OffsetDateTime` to implement `sqlx::Type<sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&time::offset_date_time::OffsetDateTime>` to implement `Encode<'_, sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs","byte_start":2895,"byte_end":2909,"line_start":79,"line_end":79,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `time::offset_date_time::OffsetDateTime: sqlx::Type<sqlx::Postgres>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_postgres!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `sqlx::Type<sqlx::Postgres>` is not implemented for `time::offset_date_time::OffsetDateTime`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `sqlx::Type<DB>`:\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m           and 60 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&time::offset_date_time::OffsetDateTime` to implement `sqlx::Type<sqlx::Postgres>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&time::offset_date_time::OffsetDateTime>` to implement `Encode<'_, sqlx::Postgres>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs:79:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m79\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `uuid::Uuid: Encode<'_, sqlx::Postgres>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":"the trait `Encode<'_, sqlx::Postgres>` is not implemented for `uuid::Uuid`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `Encode<'q, DB>`:\n  <bool as Encode<'q, sqlx::Sqlite>>\n  <bool as Encode<'_, sqlx::Postgres>>\n  <bool as Encode<'_, sqlx::MySql>>\n  <i8 as Encode<'q, sqlx::Sqlite>>\n  <i8 as Encode<'_, sqlx::Postgres>>\n  <i8 as Encode<'_, sqlx::MySql>>\n  <i16 as Encode<'q, sqlx::Sqlite>>\n  <i16 as Encode<'_, sqlx::Postgres>>\nand 52 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&uuid::Uuid` to implement `Encode<'_, sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"1 redundant requirement hidden","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&uuid::Uuid>` to implement `Encode<'_, sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs","byte_start":2895,"byte_end":2909,"line_start":79,"line_end":79,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `uuid::Uuid: Encode<'_, sqlx::Postgres>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_postgres!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Encode<'_, sqlx::Postgres>` is not implemented for `uuid::Uuid`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `Encode<'q, DB>`:\u001b[0m\n\u001b[0m             <bool as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i16 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m           and 52 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&uuid::Uuid` to implement `Encode<'_, sqlx::Postgres>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: 1 redundant requirement hidden\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&uuid::Uuid>` to implement `Encode<'_, sqlx::Postgres>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs:79:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m79\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `uuid::Uuid: sqlx::Type<sqlx::Postgres>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":"the trait `sqlx::Type<sqlx::Postgres>` is not implemented for `uuid::Uuid`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `sqlx::Type<DB>`:\n  <bool as sqlx::Type<sqlx::Postgres>>\n  <bool as sqlx::Type<sqlx::Sqlite>>\n  <bool as sqlx::Type<sqlx::MySql>>\n  <i8 as sqlx::Type<sqlx::Postgres>>\n  <i8 as sqlx::Type<sqlx::Sqlite>>\n  <i8 as sqlx::Type<sqlx::MySql>>\n  <i16 as sqlx::Type<sqlx::Postgres>>\n  <i16 as sqlx::Type<sqlx::Sqlite>>\nand 60 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&uuid::Uuid` to implement `sqlx::Type<sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&uuid::Uuid>` to implement `Encode<'_, sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs","byte_start":2895,"byte_end":2909,"line_start":79,"line_end":79,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `uuid::Uuid: sqlx::Type<sqlx::Postgres>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_postgres!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `sqlx::Type<sqlx::Postgres>` is not implemented for `uuid::Uuid`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `sqlx::Type<DB>`:\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m           and 60 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&uuid::Uuid` to implement `sqlx::Type<sqlx::Postgres>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&uuid::Uuid>` to implement `Encode<'_, sqlx::Postgres>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs:79:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m79\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `rust_decimal::decimal::Decimal: Encode<'_, sqlx::Postgres>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":"the trait `Encode<'_, sqlx::Postgres>` is not implemented for `rust_decimal::decimal::Decimal`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `Encode<'q, DB>`:\n  <bool as Encode<'q, sqlx::Sqlite>>\n  <bool as Encode<'_, sqlx::Postgres>>\n  <bool as Encode<'_, sqlx::MySql>>\n  <i8 as Encode<'q, sqlx::Sqlite>>\n  <i8 as Encode<'_, sqlx::Postgres>>\n  <i8 as Encode<'_, sqlx::MySql>>\n  <i16 as Encode<'q, sqlx::Sqlite>>\n  <i16 as Encode<'_, sqlx::Postgres>>\nand 52 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&rust_decimal::decimal::Decimal` to implement `Encode<'_, sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"1 redundant requirement hidden","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&rust_decimal::decimal::Decimal>` to implement `Encode<'_, sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs","byte_start":2895,"byte_end":2909,"line_start":79,"line_end":79,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `rust_decimal::decimal::Decimal: Encode<'_, sqlx::Postgres>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_postgres!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Encode<'_, sqlx::Postgres>` is not implemented for `rust_decimal::decimal::Decimal`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `Encode<'q, DB>`:\u001b[0m\n\u001b[0m             <bool as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i16 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m           and 52 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&rust_decimal::decimal::Decimal` to implement `Encode<'_, sqlx::Postgres>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: 1 redundant requirement hidden\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&rust_decimal::decimal::Decimal>` to implement `Encode<'_, sqlx::Postgres>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs:79:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m79\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `rust_decimal::decimal::Decimal: sqlx::Type<sqlx::Postgres>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":"the trait `sqlx::Type<sqlx::Postgres>` is not implemented for `rust_decimal::decimal::Decimal`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `sqlx::Type<DB>`:\n  <bool as sqlx::Type<sqlx::Postgres>>\n  <bool as sqlx::Type<sqlx::Sqlite>>\n  <bool as sqlx::Type<sqlx::MySql>>\n  <i8 as sqlx::Type<sqlx::Postgres>>\n  <i8 as sqlx::Type<sqlx::Sqlite>>\n  <i8 as sqlx::Type<sqlx::MySql>>\n  <i16 as sqlx::Type<sqlx::Postgres>>\n  <i16 as sqlx::Type<sqlx::Sqlite>>\nand 60 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&rust_decimal::decimal::Decimal` to implement `sqlx::Type<sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&rust_decimal::decimal::Decimal>` to implement `Encode<'_, sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs","byte_start":2895,"byte_end":2909,"line_start":79,"line_end":79,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `rust_decimal::decimal::Decimal: sqlx::Type<sqlx::Postgres>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_postgres!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `sqlx::Type<sqlx::Postgres>` is not implemented for `rust_decimal::decimal::Decimal`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `sqlx::Type<DB>`:\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m           and 60 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&rust_decimal::decimal::Decimal` to implement `sqlx::Type<sqlx::Postgres>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&rust_decimal::decimal::Decimal>` to implement `Encode<'_, sqlx::Postgres>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs:79:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m79\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `chrono::naive::date::NaiveDate: Encode<'_, sqlx::Postgres>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":"the trait `Encode<'_, sqlx::Postgres>` is not implemented for `chrono::naive::date::NaiveDate`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `Encode<'q, DB>`:\n  <bool as Encode<'q, sqlx::Sqlite>>\n  <bool as Encode<'_, sqlx::Postgres>>\n  <bool as Encode<'_, sqlx::MySql>>\n  <i8 as Encode<'q, sqlx::Sqlite>>\n  <i8 as Encode<'_, sqlx::Postgres>>\n  <i8 as Encode<'_, sqlx::MySql>>\n  <i16 as Encode<'q, sqlx::Sqlite>>\n  <i16 as Encode<'_, sqlx::Postgres>>\nand 52 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&chrono::naive::date::NaiveDate` to implement `Encode<'_, sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"1 redundant requirement hidden","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&chrono::naive::date::NaiveDate>` to implement `Encode<'_, sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs","byte_start":1595,"byte_end":1609,"line_start":54,"line_end":54,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `chrono::naive::date::NaiveDate: Encode<'_, sqlx::Postgres>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_postgres!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Encode<'_, sqlx::Postgres>` is not implemented for `chrono::naive::date::NaiveDate`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `Encode<'q, DB>`:\u001b[0m\n\u001b[0m             <bool as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i16 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m           and 52 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&chrono::naive::date::NaiveDate` to implement `Encode<'_, sqlx::Postgres>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: 1 redundant requirement hidden\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&chrono::naive::date::NaiveDate>` to implement `Encode<'_, sqlx::Postgres>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs:54:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `chrono::naive::date::NaiveDate: sqlx::Type<sqlx::Postgres>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":"the trait `sqlx::Type<sqlx::Postgres>` is not implemented for `chrono::naive::date::NaiveDate`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `sqlx::Type<DB>`:\n  <bool as sqlx::Type<sqlx::Postgres>>\n  <bool as sqlx::Type<sqlx::Sqlite>>\n  <bool as sqlx::Type<sqlx::MySql>>\n  <i8 as sqlx::Type<sqlx::Postgres>>\n  <i8 as sqlx::Type<sqlx::Sqlite>>\n  <i8 as sqlx::Type<sqlx::MySql>>\n  <i16 as sqlx::Type<sqlx::Postgres>>\n  <i16 as sqlx::Type<sqlx::Sqlite>>\nand 60 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&chrono::naive::date::NaiveDate` to implement `sqlx::Type<sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&chrono::naive::date::NaiveDate>` to implement `Encode<'_, sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs","byte_start":1595,"byte_end":1609,"line_start":54,"line_end":54,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `chrono::naive::date::NaiveDate: sqlx::Type<sqlx::Postgres>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_postgres!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `sqlx::Type<sqlx::Postgres>` is not implemented for `chrono::naive::date::NaiveDate`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `sqlx::Type<DB>`:\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m           and 60 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&chrono::naive::date::NaiveDate` to implement `sqlx::Type<sqlx::Postgres>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&chrono::naive::date::NaiveDate>` to implement `Encode<'_, sqlx::Postgres>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs:54:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `chrono::naive::time::NaiveTime: Encode<'_, sqlx::Postgres>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":"the trait `Encode<'_, sqlx::Postgres>` is not implemented for `chrono::naive::time::NaiveTime`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `Encode<'q, DB>`:\n  <bool as Encode<'q, sqlx::Sqlite>>\n  <bool as Encode<'_, sqlx::Postgres>>\n  <bool as Encode<'_, sqlx::MySql>>\n  <i8 as Encode<'q, sqlx::Sqlite>>\n  <i8 as Encode<'_, sqlx::Postgres>>\n  <i8 as Encode<'_, sqlx::MySql>>\n  <i16 as Encode<'q, sqlx::Sqlite>>\n  <i16 as Encode<'_, sqlx::Postgres>>\nand 52 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&chrono::naive::time::NaiveTime` to implement `Encode<'_, sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"1 redundant requirement hidden","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&chrono::naive::time::NaiveTime>` to implement `Encode<'_, sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs","byte_start":1595,"byte_end":1609,"line_start":54,"line_end":54,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `chrono::naive::time::NaiveTime: Encode<'_, sqlx::Postgres>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_postgres!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Encode<'_, sqlx::Postgres>` is not implemented for `chrono::naive::time::NaiveTime`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `Encode<'q, DB>`:\u001b[0m\n\u001b[0m             <bool as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i16 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m           and 52 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&chrono::naive::time::NaiveTime` to implement `Encode<'_, sqlx::Postgres>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: 1 redundant requirement hidden\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&chrono::naive::time::NaiveTime>` to implement `Encode<'_, sqlx::Postgres>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs:54:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `chrono::naive::time::NaiveTime: sqlx::Type<sqlx::Postgres>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":"the trait `sqlx::Type<sqlx::Postgres>` is not implemented for `chrono::naive::time::NaiveTime`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `sqlx::Type<DB>`:\n  <bool as sqlx::Type<sqlx::Postgres>>\n  <bool as sqlx::Type<sqlx::Sqlite>>\n  <bool as sqlx::Type<sqlx::MySql>>\n  <i8 as sqlx::Type<sqlx::Postgres>>\n  <i8 as sqlx::Type<sqlx::Sqlite>>\n  <i8 as sqlx::Type<sqlx::MySql>>\n  <i16 as sqlx::Type<sqlx::Postgres>>\n  <i16 as sqlx::Type<sqlx::Sqlite>>\nand 60 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&chrono::naive::time::NaiveTime` to implement `sqlx::Type<sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&chrono::naive::time::NaiveTime>` to implement `Encode<'_, sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs","byte_start":1595,"byte_end":1609,"line_start":54,"line_end":54,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `chrono::naive::time::NaiveTime: sqlx::Type<sqlx::Postgres>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_postgres!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `sqlx::Type<sqlx::Postgres>` is not implemented for `chrono::naive::time::NaiveTime`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `sqlx::Type<DB>`:\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m           and 60 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&chrono::naive::time::NaiveTime` to implement `sqlx::Type<sqlx::Postgres>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&chrono::naive::time::NaiveTime>` to implement `Encode<'_, sqlx::Postgres>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs:54:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `chrono::naive::datetime::NaiveDateTime: Encode<'_, sqlx::Postgres>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":"the trait `Encode<'_, sqlx::Postgres>` is not implemented for `chrono::naive::datetime::NaiveDateTime`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `Encode<'q, DB>`:\n  <bool as Encode<'q, sqlx::Sqlite>>\n  <bool as Encode<'_, sqlx::Postgres>>\n  <bool as Encode<'_, sqlx::MySql>>\n  <i8 as Encode<'q, sqlx::Sqlite>>\n  <i8 as Encode<'_, sqlx::Postgres>>\n  <i8 as Encode<'_, sqlx::MySql>>\n  <i16 as Encode<'q, sqlx::Sqlite>>\n  <i16 as Encode<'_, sqlx::Postgres>>\nand 52 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&chrono::naive::datetime::NaiveDateTime` to implement `Encode<'_, sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"1 redundant requirement hidden","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&chrono::naive::datetime::NaiveDateTime>` to implement `Encode<'_, sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs","byte_start":1595,"byte_end":1609,"line_start":54,"line_end":54,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `chrono::naive::datetime::NaiveDateTime: Encode<'_, sqlx::Postgres>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_postgres!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Encode<'_, sqlx::Postgres>` is not implemented for `chrono::naive::datetime::NaiveDateTime`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `Encode<'q, DB>`:\u001b[0m\n\u001b[0m             <bool as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i16 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m           and 52 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&chrono::naive::datetime::NaiveDateTime` to implement `Encode<'_, sqlx::Postgres>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: 1 redundant requirement hidden\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&chrono::naive::datetime::NaiveDateTime>` to implement `Encode<'_, sqlx::Postgres>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs:54:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `chrono::naive::datetime::NaiveDateTime: sqlx::Type<sqlx::Postgres>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":"the trait `sqlx::Type<sqlx::Postgres>` is not implemented for `chrono::naive::datetime::NaiveDateTime`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `sqlx::Type<DB>`:\n  <bool as sqlx::Type<sqlx::Postgres>>\n  <bool as sqlx::Type<sqlx::Sqlite>>\n  <bool as sqlx::Type<sqlx::MySql>>\n  <i8 as sqlx::Type<sqlx::Postgres>>\n  <i8 as sqlx::Type<sqlx::Sqlite>>\n  <i8 as sqlx::Type<sqlx::MySql>>\n  <i16 as sqlx::Type<sqlx::Postgres>>\n  <i16 as sqlx::Type<sqlx::Sqlite>>\nand 60 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&chrono::naive::datetime::NaiveDateTime` to implement `sqlx::Type<sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&chrono::naive::datetime::NaiveDateTime>` to implement `Encode<'_, sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs","byte_start":1595,"byte_end":1609,"line_start":54,"line_end":54,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `chrono::naive::datetime::NaiveDateTime: sqlx::Type<sqlx::Postgres>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_postgres!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `sqlx::Type<sqlx::Postgres>` is not implemented for `chrono::naive::datetime::NaiveDateTime`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `sqlx::Type<DB>`:\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m           and 60 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&chrono::naive::datetime::NaiveDateTime` to implement `sqlx::Type<sqlx::Postgres>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&chrono::naive::datetime::NaiveDateTime>` to implement `Encode<'_, sqlx::Postgres>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs:54:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `chrono::datetime::DateTime<chrono::offset::utc::Utc>: Encode<'_, sqlx::Postgres>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":"the trait `Encode<'_, sqlx::Postgres>` is not implemented for `chrono::datetime::DateTime<chrono::offset::utc::Utc>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `Encode<'q, DB>`:\n  <bool as Encode<'q, sqlx::Sqlite>>\n  <bool as Encode<'_, sqlx::Postgres>>\n  <bool as Encode<'_, sqlx::MySql>>\n  <i8 as Encode<'q, sqlx::Sqlite>>\n  <i8 as Encode<'_, sqlx::Postgres>>\n  <i8 as Encode<'_, sqlx::MySql>>\n  <i16 as Encode<'q, sqlx::Sqlite>>\n  <i16 as Encode<'_, sqlx::Postgres>>\nand 52 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&chrono::datetime::DateTime<chrono::offset::utc::Utc>` to implement `Encode<'_, sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"1 redundant requirement hidden","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&chrono::datetime::DateTime<chrono::offset::utc::Utc>>` to implement `Encode<'_, sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs","byte_start":1595,"byte_end":1609,"line_start":54,"line_end":54,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `chrono::datetime::DateTime<chrono::offset::utc::Utc>: Encode<'_, sqlx::Postgres>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_postgres!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Encode<'_, sqlx::Postgres>` is not implemented for `chrono::datetime::DateTime<chrono::offset::utc::Utc>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `Encode<'q, DB>`:\u001b[0m\n\u001b[0m             <bool as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i16 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m           and 52 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&chrono::datetime::DateTime<chrono::offset::utc::Utc>` to implement `Encode<'_, sqlx::Postgres>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: 1 redundant requirement hidden\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&chrono::datetime::DateTime<chrono::offset::utc::Utc>>` to implement `Encode<'_, sqlx::Postgres>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs:54:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `chrono::datetime::DateTime<chrono::offset::utc::Utc>: sqlx::Type<sqlx::Postgres>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":"the trait `sqlx::Type<sqlx::Postgres>` is not implemented for `chrono::datetime::DateTime<chrono::offset::utc::Utc>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `sqlx::Type<DB>`:\n  <bool as sqlx::Type<sqlx::Postgres>>\n  <bool as sqlx::Type<sqlx::Sqlite>>\n  <bool as sqlx::Type<sqlx::MySql>>\n  <i8 as sqlx::Type<sqlx::Postgres>>\n  <i8 as sqlx::Type<sqlx::Sqlite>>\n  <i8 as sqlx::Type<sqlx::MySql>>\n  <i16 as sqlx::Type<sqlx::Postgres>>\n  <i16 as sqlx::Type<sqlx::Sqlite>>\nand 60 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&chrono::datetime::DateTime<chrono::offset::utc::Utc>` to implement `sqlx::Type<sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&chrono::datetime::DateTime<chrono::offset::utc::Utc>>` to implement `Encode<'_, sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs","byte_start":1595,"byte_end":1609,"line_start":54,"line_end":54,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `chrono::datetime::DateTime<chrono::offset::utc::Utc>: sqlx::Type<sqlx::Postgres>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_postgres!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `sqlx::Type<sqlx::Postgres>` is not implemented for `chrono::datetime::DateTime<chrono::offset::utc::Utc>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `sqlx::Type<DB>`:\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m           and 60 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&chrono::datetime::DateTime<chrono::offset::utc::Utc>` to implement `sqlx::Type<sqlx::Postgres>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&chrono::datetime::DateTime<chrono::offset::utc::Utc>>` to implement `Encode<'_, sqlx::Postgres>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs:54:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `chrono::datetime::DateTime<chrono::offset::local::Local>: Encode<'_, sqlx::Postgres>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":"the trait `Encode<'_, sqlx::Postgres>` is not implemented for `chrono::datetime::DateTime<chrono::offset::local::Local>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `Encode<'q, DB>`:\n  <bool as Encode<'q, sqlx::Sqlite>>\n  <bool as Encode<'_, sqlx::Postgres>>\n  <bool as Encode<'_, sqlx::MySql>>\n  <i8 as Encode<'q, sqlx::Sqlite>>\n  <i8 as Encode<'_, sqlx::Postgres>>\n  <i8 as Encode<'_, sqlx::MySql>>\n  <i16 as Encode<'q, sqlx::Sqlite>>\n  <i16 as Encode<'_, sqlx::Postgres>>\nand 52 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&chrono::datetime::DateTime<chrono::offset::local::Local>` to implement `Encode<'_, sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"1 redundant requirement hidden","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&chrono::datetime::DateTime<chrono::offset::local::Local>>` to implement `Encode<'_, sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs","byte_start":1595,"byte_end":1609,"line_start":54,"line_end":54,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `chrono::datetime::DateTime<chrono::offset::local::Local>: Encode<'_, sqlx::Postgres>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_postgres!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Encode<'_, sqlx::Postgres>` is not implemented for `chrono::datetime::DateTime<chrono::offset::local::Local>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `Encode<'q, DB>`:\u001b[0m\n\u001b[0m             <bool as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i16 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m           and 52 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&chrono::datetime::DateTime<chrono::offset::local::Local>` to implement `Encode<'_, sqlx::Postgres>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: 1 redundant requirement hidden\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&chrono::datetime::DateTime<chrono::offset::local::Local>>` to implement `Encode<'_, sqlx::Postgres>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs:54:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `chrono::datetime::DateTime<chrono::offset::local::Local>: sqlx::Type<sqlx::Postgres>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":"the trait `sqlx::Type<sqlx::Postgres>` is not implemented for `chrono::datetime::DateTime<chrono::offset::local::Local>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `sqlx::Type<DB>`:\n  <bool as sqlx::Type<sqlx::Postgres>>\n  <bool as sqlx::Type<sqlx::Sqlite>>\n  <bool as sqlx::Type<sqlx::MySql>>\n  <i8 as sqlx::Type<sqlx::Postgres>>\n  <i8 as sqlx::Type<sqlx::Sqlite>>\n  <i8 as sqlx::Type<sqlx::MySql>>\n  <i16 as sqlx::Type<sqlx::Postgres>>\n  <i16 as sqlx::Type<sqlx::Sqlite>>\nand 60 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&chrono::datetime::DateTime<chrono::offset::local::Local>` to implement `sqlx::Type<sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&chrono::datetime::DateTime<chrono::offset::local::Local>>` to implement `Encode<'_, sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs","byte_start":1595,"byte_end":1609,"line_start":54,"line_end":54,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `chrono::datetime::DateTime<chrono::offset::local::Local>: sqlx::Type<sqlx::Postgres>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_postgres!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `sqlx::Type<sqlx::Postgres>` is not implemented for `chrono::datetime::DateTime<chrono::offset::local::Local>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `sqlx::Type<DB>`:\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m           and 60 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&chrono::datetime::DateTime<chrono::offset::local::Local>` to implement `sqlx::Type<sqlx::Postgres>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&chrono::datetime::DateTime<chrono::offset::local::Local>>` to implement `Encode<'_, sqlx::Postgres>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs:54:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `chrono::datetime::DateTime<chrono::offset::fixed::FixedOffset>: Encode<'_, sqlx::Postgres>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":"the trait `Encode<'_, sqlx::Postgres>` is not implemented for `chrono::datetime::DateTime<chrono::offset::fixed::FixedOffset>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `Encode<'q, DB>`:\n  <bool as Encode<'q, sqlx::Sqlite>>\n  <bool as Encode<'_, sqlx::Postgres>>\n  <bool as Encode<'_, sqlx::MySql>>\n  <i8 as Encode<'q, sqlx::Sqlite>>\n  <i8 as Encode<'_, sqlx::Postgres>>\n  <i8 as Encode<'_, sqlx::MySql>>\n  <i16 as Encode<'q, sqlx::Sqlite>>\n  <i16 as Encode<'_, sqlx::Postgres>>\nand 52 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&chrono::datetime::DateTime<chrono::offset::fixed::FixedOffset>` to implement `Encode<'_, sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"1 redundant requirement hidden","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&chrono::datetime::DateTime<chrono::offset::fixed::FixedOffset>>` to implement `Encode<'_, sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs","byte_start":1595,"byte_end":1609,"line_start":54,"line_end":54,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `chrono::datetime::DateTime<chrono::offset::fixed::FixedOffset>: Encode<'_, sqlx::Postgres>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_postgres!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Encode<'_, sqlx::Postgres>` is not implemented for `chrono::datetime::DateTime<chrono::offset::fixed::FixedOffset>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `Encode<'q, DB>`:\u001b[0m\n\u001b[0m             <bool as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i16 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m           and 52 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&chrono::datetime::DateTime<chrono::offset::fixed::FixedOffset>` to implement `Encode<'_, sqlx::Postgres>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: 1 redundant requirement hidden\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&chrono::datetime::DateTime<chrono::offset::fixed::FixedOffset>>` to implement `Encode<'_, sqlx::Postgres>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs:54:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `chrono::datetime::DateTime<chrono::offset::fixed::FixedOffset>: sqlx::Type<sqlx::Postgres>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":"the trait `sqlx::Type<sqlx::Postgres>` is not implemented for `chrono::datetime::DateTime<chrono::offset::fixed::FixedOffset>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `sqlx::Type<DB>`:\n  <bool as sqlx::Type<sqlx::Postgres>>\n  <bool as sqlx::Type<sqlx::Sqlite>>\n  <bool as sqlx::Type<sqlx::MySql>>\n  <i8 as sqlx::Type<sqlx::Postgres>>\n  <i8 as sqlx::Type<sqlx::Sqlite>>\n  <i8 as sqlx::Type<sqlx::MySql>>\n  <i16 as sqlx::Type<sqlx::Postgres>>\n  <i16 as sqlx::Type<sqlx::Sqlite>>\nand 60 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&chrono::datetime::DateTime<chrono::offset::fixed::FixedOffset>` to implement `sqlx::Type<sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&chrono::datetime::DateTime<chrono::offset::fixed::FixedOffset>>` to implement `Encode<'_, sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs","byte_start":1595,"byte_end":1609,"line_start":54,"line_end":54,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `chrono::datetime::DateTime<chrono::offset::fixed::FixedOffset>: sqlx::Type<sqlx::Postgres>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_postgres!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `sqlx::Type<sqlx::Postgres>` is not implemented for `chrono::datetime::DateTime<chrono::offset::fixed::FixedOffset>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `sqlx::Type<DB>`:\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m           and 60 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&chrono::datetime::DateTime<chrono::offset::fixed::FixedOffset>` to implement `sqlx::Type<sqlx::Postgres>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&chrono::datetime::DateTime<chrono::offset::fixed::FixedOffset>>` to implement `Encode<'_, sqlx::Postgres>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs:54:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `time::date::Date: Encode<'_, sqlx::Postgres>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":"the trait `Encode<'_, sqlx::Postgres>` is not implemented for `time::date::Date`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `Encode<'q, DB>`:\n  <bool as Encode<'q, sqlx::Sqlite>>\n  <bool as Encode<'_, sqlx::Postgres>>\n  <bool as Encode<'_, sqlx::MySql>>\n  <i8 as Encode<'q, sqlx::Sqlite>>\n  <i8 as Encode<'_, sqlx::Postgres>>\n  <i8 as Encode<'_, sqlx::MySql>>\n  <i16 as Encode<'q, sqlx::Sqlite>>\n  <i16 as Encode<'_, sqlx::Postgres>>\nand 52 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&time::date::Date` to implement `Encode<'_, sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"1 redundant requirement hidden","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&time::date::Date>` to implement `Encode<'_, sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs","byte_start":1595,"byte_end":1609,"line_start":54,"line_end":54,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `time::date::Date: Encode<'_, sqlx::Postgres>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_postgres!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Encode<'_, sqlx::Postgres>` is not implemented for `time::date::Date`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `Encode<'q, DB>`:\u001b[0m\n\u001b[0m             <bool as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i16 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m           and 52 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&time::date::Date` to implement `Encode<'_, sqlx::Postgres>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: 1 redundant requirement hidden\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&time::date::Date>` to implement `Encode<'_, sqlx::Postgres>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs:54:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `time::date::Date: sqlx::Type<sqlx::Postgres>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":"the trait `sqlx::Type<sqlx::Postgres>` is not implemented for `time::date::Date`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `sqlx::Type<DB>`:\n  <bool as sqlx::Type<sqlx::Postgres>>\n  <bool as sqlx::Type<sqlx::Sqlite>>\n  <bool as sqlx::Type<sqlx::MySql>>\n  <i8 as sqlx::Type<sqlx::Postgres>>\n  <i8 as sqlx::Type<sqlx::Sqlite>>\n  <i8 as sqlx::Type<sqlx::MySql>>\n  <i16 as sqlx::Type<sqlx::Postgres>>\n  <i16 as sqlx::Type<sqlx::Sqlite>>\nand 60 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&time::date::Date` to implement `sqlx::Type<sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&time::date::Date>` to implement `Encode<'_, sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs","byte_start":1595,"byte_end":1609,"line_start":54,"line_end":54,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `time::date::Date: sqlx::Type<sqlx::Postgres>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_postgres!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `sqlx::Type<sqlx::Postgres>` is not implemented for `time::date::Date`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `sqlx::Type<DB>`:\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m           and 60 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&time::date::Date` to implement `sqlx::Type<sqlx::Postgres>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&time::date::Date>` to implement `Encode<'_, sqlx::Postgres>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs:54:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `time::time_mod::Time: Encode<'_, sqlx::Postgres>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":"the trait `Encode<'_, sqlx::Postgres>` is not implemented for `time::time_mod::Time`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `Encode<'q, DB>`:\n  <bool as Encode<'q, sqlx::Sqlite>>\n  <bool as Encode<'_, sqlx::Postgres>>\n  <bool as Encode<'_, sqlx::MySql>>\n  <i8 as Encode<'q, sqlx::Sqlite>>\n  <i8 as Encode<'_, sqlx::Postgres>>\n  <i8 as Encode<'_, sqlx::MySql>>\n  <i16 as Encode<'q, sqlx::Sqlite>>\n  <i16 as Encode<'_, sqlx::Postgres>>\nand 52 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&time::time_mod::Time` to implement `Encode<'_, sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"1 redundant requirement hidden","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&time::time_mod::Time>` to implement `Encode<'_, sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs","byte_start":1595,"byte_end":1609,"line_start":54,"line_end":54,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `time::time_mod::Time: Encode<'_, sqlx::Postgres>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_postgres!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Encode<'_, sqlx::Postgres>` is not implemented for `time::time_mod::Time`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `Encode<'q, DB>`:\u001b[0m\n\u001b[0m             <bool as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i16 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m           and 52 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&time::time_mod::Time` to implement `Encode<'_, sqlx::Postgres>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: 1 redundant requirement hidden\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&time::time_mod::Time>` to implement `Encode<'_, sqlx::Postgres>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs:54:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `time::time_mod::Time: sqlx::Type<sqlx::Postgres>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":"the trait `sqlx::Type<sqlx::Postgres>` is not implemented for `time::time_mod::Time`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `sqlx::Type<DB>`:\n  <bool as sqlx::Type<sqlx::Postgres>>\n  <bool as sqlx::Type<sqlx::Sqlite>>\n  <bool as sqlx::Type<sqlx::MySql>>\n  <i8 as sqlx::Type<sqlx::Postgres>>\n  <i8 as sqlx::Type<sqlx::Sqlite>>\n  <i8 as sqlx::Type<sqlx::MySql>>\n  <i16 as sqlx::Type<sqlx::Postgres>>\n  <i16 as sqlx::Type<sqlx::Sqlite>>\nand 60 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&time::time_mod::Time` to implement `sqlx::Type<sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&time::time_mod::Time>` to implement `Encode<'_, sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs","byte_start":1595,"byte_end":1609,"line_start":54,"line_end":54,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `time::time_mod::Time: sqlx::Type<sqlx::Postgres>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_postgres!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `sqlx::Type<sqlx::Postgres>` is not implemented for `time::time_mod::Time`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `sqlx::Type<DB>`:\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m           and 60 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&time::time_mod::Time` to implement `sqlx::Type<sqlx::Postgres>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&time::time_mod::Time>` to implement `Encode<'_, sqlx::Postgres>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs:54:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `time::primitive_date_time::PrimitiveDateTime: Encode<'_, sqlx::Postgres>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":"the trait `Encode<'_, sqlx::Postgres>` is not implemented for `time::primitive_date_time::PrimitiveDateTime`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `Encode<'q, DB>`:\n  <bool as Encode<'q, sqlx::Sqlite>>\n  <bool as Encode<'_, sqlx::Postgres>>\n  <bool as Encode<'_, sqlx::MySql>>\n  <i8 as Encode<'q, sqlx::Sqlite>>\n  <i8 as Encode<'_, sqlx::Postgres>>\n  <i8 as Encode<'_, sqlx::MySql>>\n  <i16 as Encode<'q, sqlx::Sqlite>>\n  <i16 as Encode<'_, sqlx::Postgres>>\nand 52 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&time::primitive_date_time::PrimitiveDateTime` to implement `Encode<'_, sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"1 redundant requirement hidden","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&time::primitive_date_time::PrimitiveDateTime>` to implement `Encode<'_, sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs","byte_start":1595,"byte_end":1609,"line_start":54,"line_end":54,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `time::primitive_date_time::PrimitiveDateTime: Encode<'_, sqlx::Postgres>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_postgres!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Encode<'_, sqlx::Postgres>` is not implemented for `time::primitive_date_time::PrimitiveDateTime`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `Encode<'q, DB>`:\u001b[0m\n\u001b[0m             <bool as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i16 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m           and 52 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&time::primitive_date_time::PrimitiveDateTime` to implement `Encode<'_, sqlx::Postgres>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: 1 redundant requirement hidden\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&time::primitive_date_time::PrimitiveDateTime>` to implement `Encode<'_, sqlx::Postgres>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs:54:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `time::primitive_date_time::PrimitiveDateTime: sqlx::Type<sqlx::Postgres>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":"the trait `sqlx::Type<sqlx::Postgres>` is not implemented for `time::primitive_date_time::PrimitiveDateTime`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `sqlx::Type<DB>`:\n  <bool as sqlx::Type<sqlx::Postgres>>\n  <bool as sqlx::Type<sqlx::Sqlite>>\n  <bool as sqlx::Type<sqlx::MySql>>\n  <i8 as sqlx::Type<sqlx::Postgres>>\n  <i8 as sqlx::Type<sqlx::Sqlite>>\n  <i8 as sqlx::Type<sqlx::MySql>>\n  <i16 as sqlx::Type<sqlx::Postgres>>\n  <i16 as sqlx::Type<sqlx::Sqlite>>\nand 60 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&time::primitive_date_time::PrimitiveDateTime` to implement `sqlx::Type<sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&time::primitive_date_time::PrimitiveDateTime>` to implement `Encode<'_, sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs","byte_start":1595,"byte_end":1609,"line_start":54,"line_end":54,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `time::primitive_date_time::PrimitiveDateTime: sqlx::Type<sqlx::Postgres>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_postgres!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `sqlx::Type<sqlx::Postgres>` is not implemented for `time::primitive_date_time::PrimitiveDateTime`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `sqlx::Type<DB>`:\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m           and 60 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&time::primitive_date_time::PrimitiveDateTime` to implement `sqlx::Type<sqlx::Postgres>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&time::primitive_date_time::PrimitiveDateTime>` to implement `Encode<'_, sqlx::Postgres>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs:54:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `time::offset_date_time::OffsetDateTime: Encode<'_, sqlx::Postgres>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":"the trait `Encode<'_, sqlx::Postgres>` is not implemented for `time::offset_date_time::OffsetDateTime`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `Encode<'q, DB>`:\n  <bool as Encode<'q, sqlx::Sqlite>>\n  <bool as Encode<'_, sqlx::Postgres>>\n  <bool as Encode<'_, sqlx::MySql>>\n  <i8 as Encode<'q, sqlx::Sqlite>>\n  <i8 as Encode<'_, sqlx::Postgres>>\n  <i8 as Encode<'_, sqlx::MySql>>\n  <i16 as Encode<'q, sqlx::Sqlite>>\n  <i16 as Encode<'_, sqlx::Postgres>>\nand 52 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&time::offset_date_time::OffsetDateTime` to implement `Encode<'_, sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"1 redundant requirement hidden","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&time::offset_date_time::OffsetDateTime>` to implement `Encode<'_, sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs","byte_start":1595,"byte_end":1609,"line_start":54,"line_end":54,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `time::offset_date_time::OffsetDateTime: Encode<'_, sqlx::Postgres>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_postgres!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Encode<'_, sqlx::Postgres>` is not implemented for `time::offset_date_time::OffsetDateTime`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `Encode<'q, DB>`:\u001b[0m\n\u001b[0m             <bool as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i16 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m           and 52 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&time::offset_date_time::OffsetDateTime` to implement `Encode<'_, sqlx::Postgres>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: 1 redundant requirement hidden\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&time::offset_date_time::OffsetDateTime>` to implement `Encode<'_, sqlx::Postgres>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs:54:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `time::offset_date_time::OffsetDateTime: sqlx::Type<sqlx::Postgres>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":"the trait `sqlx::Type<sqlx::Postgres>` is not implemented for `time::offset_date_time::OffsetDateTime`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `sqlx::Type<DB>`:\n  <bool as sqlx::Type<sqlx::Postgres>>\n  <bool as sqlx::Type<sqlx::Sqlite>>\n  <bool as sqlx::Type<sqlx::MySql>>\n  <i8 as sqlx::Type<sqlx::Postgres>>\n  <i8 as sqlx::Type<sqlx::Sqlite>>\n  <i8 as sqlx::Type<sqlx::MySql>>\n  <i16 as sqlx::Type<sqlx::Postgres>>\n  <i16 as sqlx::Type<sqlx::Sqlite>>\nand 60 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&time::offset_date_time::OffsetDateTime` to implement `sqlx::Type<sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&time::offset_date_time::OffsetDateTime>` to implement `Encode<'_, sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs","byte_start":1595,"byte_end":1609,"line_start":54,"line_end":54,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `time::offset_date_time::OffsetDateTime: sqlx::Type<sqlx::Postgres>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_postgres!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `sqlx::Type<sqlx::Postgres>` is not implemented for `time::offset_date_time::OffsetDateTime`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `sqlx::Type<DB>`:\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m           and 60 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&time::offset_date_time::OffsetDateTime` to implement `sqlx::Type<sqlx::Postgres>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&time::offset_date_time::OffsetDateTime>` to implement `Encode<'_, sqlx::Postgres>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs:54:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `uuid::Uuid: Encode<'_, sqlx::Postgres>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":"the trait `Encode<'_, sqlx::Postgres>` is not implemented for `uuid::Uuid`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `Encode<'q, DB>`:\n  <bool as Encode<'q, sqlx::Sqlite>>\n  <bool as Encode<'_, sqlx::Postgres>>\n  <bool as Encode<'_, sqlx::MySql>>\n  <i8 as Encode<'q, sqlx::Sqlite>>\n  <i8 as Encode<'_, sqlx::Postgres>>\n  <i8 as Encode<'_, sqlx::MySql>>\n  <i16 as Encode<'q, sqlx::Sqlite>>\n  <i16 as Encode<'_, sqlx::Postgres>>\nand 52 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&uuid::Uuid` to implement `Encode<'_, sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"1 redundant requirement hidden","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&uuid::Uuid>` to implement `Encode<'_, sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs","byte_start":1595,"byte_end":1609,"line_start":54,"line_end":54,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `uuid::Uuid: Encode<'_, sqlx::Postgres>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_postgres!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Encode<'_, sqlx::Postgres>` is not implemented for `uuid::Uuid`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `Encode<'q, DB>`:\u001b[0m\n\u001b[0m             <bool as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i16 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m           and 52 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&uuid::Uuid` to implement `Encode<'_, sqlx::Postgres>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: 1 redundant requirement hidden\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&uuid::Uuid>` to implement `Encode<'_, sqlx::Postgres>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs:54:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `uuid::Uuid: sqlx::Type<sqlx::Postgres>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":"the trait `sqlx::Type<sqlx::Postgres>` is not implemented for `uuid::Uuid`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `sqlx::Type<DB>`:\n  <bool as sqlx::Type<sqlx::Postgres>>\n  <bool as sqlx::Type<sqlx::Sqlite>>\n  <bool as sqlx::Type<sqlx::MySql>>\n  <i8 as sqlx::Type<sqlx::Postgres>>\n  <i8 as sqlx::Type<sqlx::Sqlite>>\n  <i8 as sqlx::Type<sqlx::MySql>>\n  <i16 as sqlx::Type<sqlx::Postgres>>\n  <i16 as sqlx::Type<sqlx::Sqlite>>\nand 60 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&uuid::Uuid` to implement `sqlx::Type<sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&uuid::Uuid>` to implement `Encode<'_, sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs","byte_start":1595,"byte_end":1609,"line_start":54,"line_end":54,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `uuid::Uuid: sqlx::Type<sqlx::Postgres>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_postgres!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `sqlx::Type<sqlx::Postgres>` is not implemented for `uuid::Uuid`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `sqlx::Type<DB>`:\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m           and 60 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&uuid::Uuid` to implement `sqlx::Type<sqlx::Postgres>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&uuid::Uuid>` to implement `Encode<'_, sqlx::Postgres>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs:54:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `rust_decimal::decimal::Decimal: Encode<'_, sqlx::Postgres>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":"the trait `Encode<'_, sqlx::Postgres>` is not implemented for `rust_decimal::decimal::Decimal`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `Encode<'q, DB>`:\n  <bool as Encode<'q, sqlx::Sqlite>>\n  <bool as Encode<'_, sqlx::Postgres>>\n  <bool as Encode<'_, sqlx::MySql>>\n  <i8 as Encode<'q, sqlx::Sqlite>>\n  <i8 as Encode<'_, sqlx::Postgres>>\n  <i8 as Encode<'_, sqlx::MySql>>\n  <i16 as Encode<'q, sqlx::Sqlite>>\n  <i16 as Encode<'_, sqlx::Postgres>>\nand 52 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&rust_decimal::decimal::Decimal` to implement `Encode<'_, sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"1 redundant requirement hidden","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&rust_decimal::decimal::Decimal>` to implement `Encode<'_, sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs","byte_start":1595,"byte_end":1609,"line_start":54,"line_end":54,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `rust_decimal::decimal::Decimal: Encode<'_, sqlx::Postgres>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_postgres!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Encode<'_, sqlx::Postgres>` is not implemented for `rust_decimal::decimal::Decimal`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `Encode<'q, DB>`:\u001b[0m\n\u001b[0m             <bool as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i16 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m           and 52 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&rust_decimal::decimal::Decimal` to implement `Encode<'_, sqlx::Postgres>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: 1 redundant requirement hidden\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&rust_decimal::decimal::Decimal>` to implement `Encode<'_, sqlx::Postgres>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs:54:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `rust_decimal::decimal::Decimal: sqlx::Type<sqlx::Postgres>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":"the trait `sqlx::Type<sqlx::Postgres>` is not implemented for `rust_decimal::decimal::Decimal`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs","byte_start":94,"byte_end":133,"line_start":4,"line_end":4,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_postgres!();","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `sqlx::Type<DB>`:\n  <bool as sqlx::Type<sqlx::Postgres>>\n  <bool as sqlx::Type<sqlx::Sqlite>>\n  <bool as sqlx::Type<sqlx::MySql>>\n  <i8 as sqlx::Type<sqlx::Postgres>>\n  <i8 as sqlx::Type<sqlx::Sqlite>>\n  <i8 as sqlx::Type<sqlx::MySql>>\n  <i16 as sqlx::Type<sqlx::Postgres>>\n  <i16 as sqlx::Type<sqlx::Sqlite>>\nand 60 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&rust_decimal::decimal::Decimal` to implement `sqlx::Type<sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&rust_decimal::decimal::Decimal>` to implement `Encode<'_, sqlx::Postgres>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs","byte_start":1595,"byte_end":1609,"line_start":54,"line_end":54,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `rust_decimal::decimal::Decimal: sqlx::Type<sqlx::Postgres>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/postgres/discovery/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_postgres!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `sqlx::Type<sqlx::Postgres>` is not implemented for `rust_decimal::decimal::Decimal`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `sqlx::Type<DB>`:\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m           and 60 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&rust_decimal::decimal::Decimal` to implement `sqlx::Type<sqlx::Postgres>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&rust_decimal::decimal::Decimal>` to implement `Encode<'_, sqlx::Postgres>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs:54:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `chrono::naive::date::NaiveDate: Encode<'_, sqlx::Sqlite>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs","byte_start":98,"byte_end":135,"line_start":4,"line_end":4,"column_start":1,"column_end":38,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_sqlite!();","highlight_start":1,"highlight_end":38}],"label":"the trait `Encode<'_, sqlx::Sqlite>` is not implemented for `chrono::naive::date::NaiveDate`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs","byte_start":98,"byte_end":135,"line_start":4,"line_end":4,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_sqlite!();","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs","byte_start":98,"byte_end":135,"line_start":4,"line_end":4,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_sqlite!();","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `Encode<'q, DB>`:\n  <bool as Encode<'q, sqlx::Sqlite>>\n  <bool as Encode<'_, sqlx::Postgres>>\n  <bool as Encode<'_, sqlx::MySql>>\n  <i8 as Encode<'q, sqlx::Sqlite>>\n  <i8 as Encode<'_, sqlx::Postgres>>\n  <i8 as Encode<'_, sqlx::MySql>>\n  <i16 as Encode<'q, sqlx::Sqlite>>\n  <i16 as Encode<'_, sqlx::Postgres>>\nand 52 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&chrono::naive::date::NaiveDate` to implement `Encode<'_, sqlx::Sqlite>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"1 redundant requirement hidden","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&chrono::naive::date::NaiveDate>` to implement `Encode<'_, sqlx::Sqlite>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs","byte_start":2895,"byte_end":2909,"line_start":79,"line_end":79,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `chrono::naive::date::NaiveDate: Encode<'_, sqlx::Sqlite>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_sqlite!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Encode<'_, sqlx::Sqlite>` is not implemented for `chrono::naive::date::NaiveDate`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `Encode<'q, DB>`:\u001b[0m\n\u001b[0m             <bool as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i16 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m           and 52 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&chrono::naive::date::NaiveDate` to implement `Encode<'_, sqlx::Sqlite>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: 1 redundant requirement hidden\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&chrono::naive::date::NaiveDate>` to implement `Encode<'_, sqlx::Sqlite>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs:79:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m79\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `chrono::naive::date::NaiveDate: sqlx::Type<sqlx::Sqlite>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs","byte_start":98,"byte_end":135,"line_start":4,"line_end":4,"column_start":1,"column_end":38,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_sqlite!();","highlight_start":1,"highlight_end":38}],"label":"the trait `sqlx::Type<sqlx::Sqlite>` is not implemented for `chrono::naive::date::NaiveDate`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs","byte_start":98,"byte_end":135,"line_start":4,"line_end":4,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_sqlite!();","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs","byte_start":98,"byte_end":135,"line_start":4,"line_end":4,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_sqlite!();","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `sqlx::Type<DB>`:\n  <bool as sqlx::Type<sqlx::Postgres>>\n  <bool as sqlx::Type<sqlx::Sqlite>>\n  <bool as sqlx::Type<sqlx::MySql>>\n  <i8 as sqlx::Type<sqlx::Postgres>>\n  <i8 as sqlx::Type<sqlx::Sqlite>>\n  <i8 as sqlx::Type<sqlx::MySql>>\n  <i16 as sqlx::Type<sqlx::Postgres>>\n  <i16 as sqlx::Type<sqlx::Sqlite>>\nand 60 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&chrono::naive::date::NaiveDate` to implement `sqlx::Type<sqlx::Sqlite>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&chrono::naive::date::NaiveDate>` to implement `Encode<'_, sqlx::Sqlite>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs","byte_start":2895,"byte_end":2909,"line_start":79,"line_end":79,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `chrono::naive::date::NaiveDate: sqlx::Type<sqlx::Sqlite>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_sqlite!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `sqlx::Type<sqlx::Sqlite>` is not implemented for `chrono::naive::date::NaiveDate`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `sqlx::Type<DB>`:\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m           and 60 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&chrono::naive::date::NaiveDate` to implement `sqlx::Type<sqlx::Sqlite>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&chrono::naive::date::NaiveDate>` to implement `Encode<'_, sqlx::Sqlite>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs:79:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m79\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `chrono::naive::time::NaiveTime: Encode<'_, sqlx::Sqlite>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs","byte_start":98,"byte_end":135,"line_start":4,"line_end":4,"column_start":1,"column_end":38,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_sqlite!();","highlight_start":1,"highlight_end":38}],"label":"the trait `Encode<'_, sqlx::Sqlite>` is not implemented for `chrono::naive::time::NaiveTime`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs","byte_start":98,"byte_end":135,"line_start":4,"line_end":4,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_sqlite!();","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs","byte_start":98,"byte_end":135,"line_start":4,"line_end":4,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_sqlite!();","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `Encode<'q, DB>`:\n  <bool as Encode<'q, sqlx::Sqlite>>\n  <bool as Encode<'_, sqlx::Postgres>>\n  <bool as Encode<'_, sqlx::MySql>>\n  <i8 as Encode<'q, sqlx::Sqlite>>\n  <i8 as Encode<'_, sqlx::Postgres>>\n  <i8 as Encode<'_, sqlx::MySql>>\n  <i16 as Encode<'q, sqlx::Sqlite>>\n  <i16 as Encode<'_, sqlx::Postgres>>\nand 52 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&chrono::naive::time::NaiveTime` to implement `Encode<'_, sqlx::Sqlite>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"1 redundant requirement hidden","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&chrono::naive::time::NaiveTime>` to implement `Encode<'_, sqlx::Sqlite>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs","byte_start":2895,"byte_end":2909,"line_start":79,"line_end":79,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `chrono::naive::time::NaiveTime: Encode<'_, sqlx::Sqlite>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_sqlite!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Encode<'_, sqlx::Sqlite>` is not implemented for `chrono::naive::time::NaiveTime`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `Encode<'q, DB>`:\u001b[0m\n\u001b[0m             <bool as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i16 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m           and 52 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&chrono::naive::time::NaiveTime` to implement `Encode<'_, sqlx::Sqlite>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: 1 redundant requirement hidden\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&chrono::naive::time::NaiveTime>` to implement `Encode<'_, sqlx::Sqlite>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs:79:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m79\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `chrono::naive::time::NaiveTime: sqlx::Type<sqlx::Sqlite>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs","byte_start":98,"byte_end":135,"line_start":4,"line_end":4,"column_start":1,"column_end":38,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_sqlite!();","highlight_start":1,"highlight_end":38}],"label":"the trait `sqlx::Type<sqlx::Sqlite>` is not implemented for `chrono::naive::time::NaiveTime`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs","byte_start":98,"byte_end":135,"line_start":4,"line_end":4,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_sqlite!();","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs","byte_start":98,"byte_end":135,"line_start":4,"line_end":4,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_sqlite!();","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `sqlx::Type<DB>`:\n  <bool as sqlx::Type<sqlx::Postgres>>\n  <bool as sqlx::Type<sqlx::Sqlite>>\n  <bool as sqlx::Type<sqlx::MySql>>\n  <i8 as sqlx::Type<sqlx::Postgres>>\n  <i8 as sqlx::Type<sqlx::Sqlite>>\n  <i8 as sqlx::Type<sqlx::MySql>>\n  <i16 as sqlx::Type<sqlx::Postgres>>\n  <i16 as sqlx::Type<sqlx::Sqlite>>\nand 60 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&chrono::naive::time::NaiveTime` to implement `sqlx::Type<sqlx::Sqlite>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&chrono::naive::time::NaiveTime>` to implement `Encode<'_, sqlx::Sqlite>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs","byte_start":2895,"byte_end":2909,"line_start":79,"line_end":79,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `chrono::naive::time::NaiveTime: sqlx::Type<sqlx::Sqlite>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_sqlite!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `sqlx::Type<sqlx::Sqlite>` is not implemented for `chrono::naive::time::NaiveTime`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `sqlx::Type<DB>`:\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m           and 60 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&chrono::naive::time::NaiveTime` to implement `sqlx::Type<sqlx::Sqlite>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&chrono::naive::time::NaiveTime>` to implement `Encode<'_, sqlx::Sqlite>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs:79:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m79\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `chrono::naive::datetime::NaiveDateTime: Encode<'_, sqlx::Sqlite>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs","byte_start":98,"byte_end":135,"line_start":4,"line_end":4,"column_start":1,"column_end":38,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_sqlite!();","highlight_start":1,"highlight_end":38}],"label":"the trait `Encode<'_, sqlx::Sqlite>` is not implemented for `chrono::naive::datetime::NaiveDateTime`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs","byte_start":98,"byte_end":135,"line_start":4,"line_end":4,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_sqlite!();","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs","byte_start":98,"byte_end":135,"line_start":4,"line_end":4,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_sqlite!();","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `Encode<'q, DB>`:\n  <bool as Encode<'q, sqlx::Sqlite>>\n  <bool as Encode<'_, sqlx::Postgres>>\n  <bool as Encode<'_, sqlx::MySql>>\n  <i8 as Encode<'q, sqlx::Sqlite>>\n  <i8 as Encode<'_, sqlx::Postgres>>\n  <i8 as Encode<'_, sqlx::MySql>>\n  <i16 as Encode<'q, sqlx::Sqlite>>\n  <i16 as Encode<'_, sqlx::Postgres>>\nand 52 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&chrono::naive::datetime::NaiveDateTime` to implement `Encode<'_, sqlx::Sqlite>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"1 redundant requirement hidden","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&chrono::naive::datetime::NaiveDateTime>` to implement `Encode<'_, sqlx::Sqlite>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs","byte_start":2895,"byte_end":2909,"line_start":79,"line_end":79,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `chrono::naive::datetime::NaiveDateTime: Encode<'_, sqlx::Sqlite>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_sqlite!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Encode<'_, sqlx::Sqlite>` is not implemented for `chrono::naive::datetime::NaiveDateTime`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `Encode<'q, DB>`:\u001b[0m\n\u001b[0m             <bool as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i16 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m           and 52 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&chrono::naive::datetime::NaiveDateTime` to implement `Encode<'_, sqlx::Sqlite>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: 1 redundant requirement hidden\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&chrono::naive::datetime::NaiveDateTime>` to implement `Encode<'_, sqlx::Sqlite>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs:79:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m79\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `chrono::naive::datetime::NaiveDateTime: sqlx::Type<sqlx::Sqlite>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs","byte_start":98,"byte_end":135,"line_start":4,"line_end":4,"column_start":1,"column_end":38,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_sqlite!();","highlight_start":1,"highlight_end":38}],"label":"the trait `sqlx::Type<sqlx::Sqlite>` is not implemented for `chrono::naive::datetime::NaiveDateTime`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs","byte_start":98,"byte_end":135,"line_start":4,"line_end":4,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_sqlite!();","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs","byte_start":98,"byte_end":135,"line_start":4,"line_end":4,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_sqlite!();","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `sqlx::Type<DB>`:\n  <bool as sqlx::Type<sqlx::Postgres>>\n  <bool as sqlx::Type<sqlx::Sqlite>>\n  <bool as sqlx::Type<sqlx::MySql>>\n  <i8 as sqlx::Type<sqlx::Postgres>>\n  <i8 as sqlx::Type<sqlx::Sqlite>>\n  <i8 as sqlx::Type<sqlx::MySql>>\n  <i16 as sqlx::Type<sqlx::Postgres>>\n  <i16 as sqlx::Type<sqlx::Sqlite>>\nand 60 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&chrono::naive::datetime::NaiveDateTime` to implement `sqlx::Type<sqlx::Sqlite>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&chrono::naive::datetime::NaiveDateTime>` to implement `Encode<'_, sqlx::Sqlite>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs","byte_start":2895,"byte_end":2909,"line_start":79,"line_end":79,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `chrono::naive::datetime::NaiveDateTime: sqlx::Type<sqlx::Sqlite>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_sqlite!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `sqlx::Type<sqlx::Sqlite>` is not implemented for `chrono::naive::datetime::NaiveDateTime`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `sqlx::Type<DB>`:\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m           and 60 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&chrono::naive::datetime::NaiveDateTime` to implement `sqlx::Type<sqlx::Sqlite>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&chrono::naive::datetime::NaiveDateTime>` to implement `Encode<'_, sqlx::Sqlite>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs:79:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m79\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `chrono::datetime::DateTime<chrono::offset::utc::Utc>: Encode<'_, sqlx::Sqlite>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs","byte_start":98,"byte_end":135,"line_start":4,"line_end":4,"column_start":1,"column_end":38,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_sqlite!();","highlight_start":1,"highlight_end":38}],"label":"the trait `Encode<'_, sqlx::Sqlite>` is not implemented for `chrono::datetime::DateTime<chrono::offset::utc::Utc>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs","byte_start":98,"byte_end":135,"line_start":4,"line_end":4,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_sqlite!();","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs","byte_start":98,"byte_end":135,"line_start":4,"line_end":4,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_sqlite!();","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `Encode<'q, DB>`:\n  <bool as Encode<'q, sqlx::Sqlite>>\n  <bool as Encode<'_, sqlx::Postgres>>\n  <bool as Encode<'_, sqlx::MySql>>\n  <i8 as Encode<'q, sqlx::Sqlite>>\n  <i8 as Encode<'_, sqlx::Postgres>>\n  <i8 as Encode<'_, sqlx::MySql>>\n  <i16 as Encode<'q, sqlx::Sqlite>>\n  <i16 as Encode<'_, sqlx::Postgres>>\nand 52 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&chrono::datetime::DateTime<chrono::offset::utc::Utc>` to implement `Encode<'_, sqlx::Sqlite>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"1 redundant requirement hidden","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&chrono::datetime::DateTime<chrono::offset::utc::Utc>>` to implement `Encode<'_, sqlx::Sqlite>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs","byte_start":2895,"byte_end":2909,"line_start":79,"line_end":79,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `chrono::datetime::DateTime<chrono::offset::utc::Utc>: Encode<'_, sqlx::Sqlite>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_sqlite!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Encode<'_, sqlx::Sqlite>` is not implemented for `chrono::datetime::DateTime<chrono::offset::utc::Utc>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `Encode<'q, DB>`:\u001b[0m\n\u001b[0m             <bool as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i16 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m           and 52 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&chrono::datetime::DateTime<chrono::offset::utc::Utc>` to implement `Encode<'_, sqlx::Sqlite>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: 1 redundant requirement hidden\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&chrono::datetime::DateTime<chrono::offset::utc::Utc>>` to implement `Encode<'_, sqlx::Sqlite>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs:79:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m79\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `chrono::datetime::DateTime<chrono::offset::utc::Utc>: sqlx::Type<sqlx::Sqlite>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs","byte_start":98,"byte_end":135,"line_start":4,"line_end":4,"column_start":1,"column_end":38,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_sqlite!();","highlight_start":1,"highlight_end":38}],"label":"the trait `sqlx::Type<sqlx::Sqlite>` is not implemented for `chrono::datetime::DateTime<chrono::offset::utc::Utc>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs","byte_start":98,"byte_end":135,"line_start":4,"line_end":4,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_sqlite!();","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs","byte_start":98,"byte_end":135,"line_start":4,"line_end":4,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_sqlite!();","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `sqlx::Type<DB>`:\n  <bool as sqlx::Type<sqlx::Postgres>>\n  <bool as sqlx::Type<sqlx::Sqlite>>\n  <bool as sqlx::Type<sqlx::MySql>>\n  <i8 as sqlx::Type<sqlx::Postgres>>\n  <i8 as sqlx::Type<sqlx::Sqlite>>\n  <i8 as sqlx::Type<sqlx::MySql>>\n  <i16 as sqlx::Type<sqlx::Postgres>>\n  <i16 as sqlx::Type<sqlx::Sqlite>>\nand 60 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&chrono::datetime::DateTime<chrono::offset::utc::Utc>` to implement `sqlx::Type<sqlx::Sqlite>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&chrono::datetime::DateTime<chrono::offset::utc::Utc>>` to implement `Encode<'_, sqlx::Sqlite>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs","byte_start":2895,"byte_end":2909,"line_start":79,"line_end":79,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `chrono::datetime::DateTime<chrono::offset::utc::Utc>: sqlx::Type<sqlx::Sqlite>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_sqlite!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `sqlx::Type<sqlx::Sqlite>` is not implemented for `chrono::datetime::DateTime<chrono::offset::utc::Utc>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `sqlx::Type<DB>`:\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m           and 60 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&chrono::datetime::DateTime<chrono::offset::utc::Utc>` to implement `sqlx::Type<sqlx::Sqlite>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&chrono::datetime::DateTime<chrono::offset::utc::Utc>>` to implement `Encode<'_, sqlx::Sqlite>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs:79:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m79\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `chrono::datetime::DateTime<chrono::offset::local::Local>: Encode<'_, sqlx::Sqlite>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs","byte_start":98,"byte_end":135,"line_start":4,"line_end":4,"column_start":1,"column_end":38,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_sqlite!();","highlight_start":1,"highlight_end":38}],"label":"the trait `Encode<'_, sqlx::Sqlite>` is not implemented for `chrono::datetime::DateTime<chrono::offset::local::Local>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs","byte_start":98,"byte_end":135,"line_start":4,"line_end":4,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_sqlite!();","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs","byte_start":98,"byte_end":135,"line_start":4,"line_end":4,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_sqlite!();","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `Encode<'q, DB>`:\n  <bool as Encode<'q, sqlx::Sqlite>>\n  <bool as Encode<'_, sqlx::Postgres>>\n  <bool as Encode<'_, sqlx::MySql>>\n  <i8 as Encode<'q, sqlx::Sqlite>>\n  <i8 as Encode<'_, sqlx::Postgres>>\n  <i8 as Encode<'_, sqlx::MySql>>\n  <i16 as Encode<'q, sqlx::Sqlite>>\n  <i16 as Encode<'_, sqlx::Postgres>>\nand 52 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&chrono::datetime::DateTime<chrono::offset::local::Local>` to implement `Encode<'_, sqlx::Sqlite>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"1 redundant requirement hidden","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&chrono::datetime::DateTime<chrono::offset::local::Local>>` to implement `Encode<'_, sqlx::Sqlite>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs","byte_start":2895,"byte_end":2909,"line_start":79,"line_end":79,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `chrono::datetime::DateTime<chrono::offset::local::Local>: Encode<'_, sqlx::Sqlite>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_sqlite!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Encode<'_, sqlx::Sqlite>` is not implemented for `chrono::datetime::DateTime<chrono::offset::local::Local>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `Encode<'q, DB>`:\u001b[0m\n\u001b[0m             <bool as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i16 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m           and 52 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&chrono::datetime::DateTime<chrono::offset::local::Local>` to implement `Encode<'_, sqlx::Sqlite>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: 1 redundant requirement hidden\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&chrono::datetime::DateTime<chrono::offset::local::Local>>` to implement `Encode<'_, sqlx::Sqlite>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs:79:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m79\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `chrono::datetime::DateTime<chrono::offset::local::Local>: sqlx::Type<sqlx::Sqlite>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs","byte_start":98,"byte_end":135,"line_start":4,"line_end":4,"column_start":1,"column_end":38,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_sqlite!();","highlight_start":1,"highlight_end":38}],"label":"the trait `sqlx::Type<sqlx::Sqlite>` is not implemented for `chrono::datetime::DateTime<chrono::offset::local::Local>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs","byte_start":98,"byte_end":135,"line_start":4,"line_end":4,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_sqlite!();","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs","byte_start":98,"byte_end":135,"line_start":4,"line_end":4,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_sqlite!();","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `sqlx::Type<DB>`:\n  <bool as sqlx::Type<sqlx::Postgres>>\n  <bool as sqlx::Type<sqlx::Sqlite>>\n  <bool as sqlx::Type<sqlx::MySql>>\n  <i8 as sqlx::Type<sqlx::Postgres>>\n  <i8 as sqlx::Type<sqlx::Sqlite>>\n  <i8 as sqlx::Type<sqlx::MySql>>\n  <i16 as sqlx::Type<sqlx::Postgres>>\n  <i16 as sqlx::Type<sqlx::Sqlite>>\nand 60 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&chrono::datetime::DateTime<chrono::offset::local::Local>` to implement `sqlx::Type<sqlx::Sqlite>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&chrono::datetime::DateTime<chrono::offset::local::Local>>` to implement `Encode<'_, sqlx::Sqlite>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs","byte_start":2895,"byte_end":2909,"line_start":79,"line_end":79,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `chrono::datetime::DateTime<chrono::offset::local::Local>: sqlx::Type<sqlx::Sqlite>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_sqlite!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `sqlx::Type<sqlx::Sqlite>` is not implemented for `chrono::datetime::DateTime<chrono::offset::local::Local>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `sqlx::Type<DB>`:\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m           and 60 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&chrono::datetime::DateTime<chrono::offset::local::Local>` to implement `sqlx::Type<sqlx::Sqlite>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&chrono::datetime::DateTime<chrono::offset::local::Local>>` to implement `Encode<'_, sqlx::Sqlite>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs:79:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m79\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `chrono::datetime::DateTime<chrono::offset::fixed::FixedOffset>: Encode<'_, sqlx::Sqlite>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs","byte_start":98,"byte_end":135,"line_start":4,"line_end":4,"column_start":1,"column_end":38,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_sqlite!();","highlight_start":1,"highlight_end":38}],"label":"the trait `Encode<'_, sqlx::Sqlite>` is not implemented for `chrono::datetime::DateTime<chrono::offset::fixed::FixedOffset>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs","byte_start":98,"byte_end":135,"line_start":4,"line_end":4,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_sqlite!();","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs","byte_start":98,"byte_end":135,"line_start":4,"line_end":4,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_sqlite!();","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `Encode<'q, DB>`:\n  <bool as Encode<'q, sqlx::Sqlite>>\n  <bool as Encode<'_, sqlx::Postgres>>\n  <bool as Encode<'_, sqlx::MySql>>\n  <i8 as Encode<'q, sqlx::Sqlite>>\n  <i8 as Encode<'_, sqlx::Postgres>>\n  <i8 as Encode<'_, sqlx::MySql>>\n  <i16 as Encode<'q, sqlx::Sqlite>>\n  <i16 as Encode<'_, sqlx::Postgres>>\nand 52 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&chrono::datetime::DateTime<chrono::offset::fixed::FixedOffset>` to implement `Encode<'_, sqlx::Sqlite>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"1 redundant requirement hidden","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&chrono::datetime::DateTime<chrono::offset::fixed::FixedOffset>>` to implement `Encode<'_, sqlx::Sqlite>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs","byte_start":2895,"byte_end":2909,"line_start":79,"line_end":79,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `chrono::datetime::DateTime<chrono::offset::fixed::FixedOffset>: Encode<'_, sqlx::Sqlite>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_sqlite!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Encode<'_, sqlx::Sqlite>` is not implemented for `chrono::datetime::DateTime<chrono::offset::fixed::FixedOffset>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `Encode<'q, DB>`:\u001b[0m\n\u001b[0m             <bool as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i16 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m           and 52 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&chrono::datetime::DateTime<chrono::offset::fixed::FixedOffset>` to implement `Encode<'_, sqlx::Sqlite>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: 1 redundant requirement hidden\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&chrono::datetime::DateTime<chrono::offset::fixed::FixedOffset>>` to implement `Encode<'_, sqlx::Sqlite>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs:79:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m79\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `chrono::datetime::DateTime<chrono::offset::fixed::FixedOffset>: sqlx::Type<sqlx::Sqlite>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs","byte_start":98,"byte_end":135,"line_start":4,"line_end":4,"column_start":1,"column_end":38,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_sqlite!();","highlight_start":1,"highlight_end":38}],"label":"the trait `sqlx::Type<sqlx::Sqlite>` is not implemented for `chrono::datetime::DateTime<chrono::offset::fixed::FixedOffset>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs","byte_start":98,"byte_end":135,"line_start":4,"line_end":4,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_sqlite!();","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs","byte_start":98,"byte_end":135,"line_start":4,"line_end":4,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_sqlite!();","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `sqlx::Type<DB>`:\n  <bool as sqlx::Type<sqlx::Postgres>>\n  <bool as sqlx::Type<sqlx::Sqlite>>\n  <bool as sqlx::Type<sqlx::MySql>>\n  <i8 as sqlx::Type<sqlx::Postgres>>\n  <i8 as sqlx::Type<sqlx::Sqlite>>\n  <i8 as sqlx::Type<sqlx::MySql>>\n  <i16 as sqlx::Type<sqlx::Postgres>>\n  <i16 as sqlx::Type<sqlx::Sqlite>>\nand 60 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&chrono::datetime::DateTime<chrono::offset::fixed::FixedOffset>` to implement `sqlx::Type<sqlx::Sqlite>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&chrono::datetime::DateTime<chrono::offset::fixed::FixedOffset>>` to implement `Encode<'_, sqlx::Sqlite>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs","byte_start":2895,"byte_end":2909,"line_start":79,"line_end":79,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `chrono::datetime::DateTime<chrono::offset::fixed::FixedOffset>: sqlx::Type<sqlx::Sqlite>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_sqlite!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `sqlx::Type<sqlx::Sqlite>` is not implemented for `chrono::datetime::DateTime<chrono::offset::fixed::FixedOffset>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `sqlx::Type<DB>`:\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m           and 60 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&chrono::datetime::DateTime<chrono::offset::fixed::FixedOffset>` to implement `sqlx::Type<sqlx::Sqlite>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&chrono::datetime::DateTime<chrono::offset::fixed::FixedOffset>>` to implement `Encode<'_, sqlx::Sqlite>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs:79:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m79\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `uuid::Uuid: Encode<'_, sqlx::Sqlite>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs","byte_start":98,"byte_end":135,"line_start":4,"line_end":4,"column_start":1,"column_end":38,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_sqlite!();","highlight_start":1,"highlight_end":38}],"label":"the trait `Encode<'_, sqlx::Sqlite>` is not implemented for `uuid::Uuid`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs","byte_start":98,"byte_end":135,"line_start":4,"line_end":4,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_sqlite!();","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs","byte_start":98,"byte_end":135,"line_start":4,"line_end":4,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_sqlite!();","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `Encode<'q, DB>`:\n  <bool as Encode<'q, sqlx::Sqlite>>\n  <bool as Encode<'_, sqlx::Postgres>>\n  <bool as Encode<'_, sqlx::MySql>>\n  <i8 as Encode<'q, sqlx::Sqlite>>\n  <i8 as Encode<'_, sqlx::Postgres>>\n  <i8 as Encode<'_, sqlx::MySql>>\n  <i16 as Encode<'q, sqlx::Sqlite>>\n  <i16 as Encode<'_, sqlx::Postgres>>\nand 52 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&uuid::Uuid` to implement `Encode<'_, sqlx::Sqlite>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"1 redundant requirement hidden","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&uuid::Uuid>` to implement `Encode<'_, sqlx::Sqlite>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs","byte_start":2895,"byte_end":2909,"line_start":79,"line_end":79,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `uuid::Uuid: Encode<'_, sqlx::Sqlite>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_sqlite!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Encode<'_, sqlx::Sqlite>` is not implemented for `uuid::Uuid`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `Encode<'q, DB>`:\u001b[0m\n\u001b[0m             <bool as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i16 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m           and 52 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&uuid::Uuid` to implement `Encode<'_, sqlx::Sqlite>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: 1 redundant requirement hidden\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&uuid::Uuid>` to implement `Encode<'_, sqlx::Sqlite>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs:79:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m79\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `uuid::Uuid: sqlx::Type<sqlx::Sqlite>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs","byte_start":98,"byte_end":135,"line_start":4,"line_end":4,"column_start":1,"column_end":38,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_sqlite!();","highlight_start":1,"highlight_end":38}],"label":"the trait `sqlx::Type<sqlx::Sqlite>` is not implemented for `uuid::Uuid`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs","byte_start":98,"byte_end":135,"line_start":4,"line_end":4,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_sqlite!();","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs","byte_start":98,"byte_end":135,"line_start":4,"line_end":4,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_sqlite!();","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `sqlx::Type<DB>`:\n  <bool as sqlx::Type<sqlx::Postgres>>\n  <bool as sqlx::Type<sqlx::Sqlite>>\n  <bool as sqlx::Type<sqlx::MySql>>\n  <i8 as sqlx::Type<sqlx::Postgres>>\n  <i8 as sqlx::Type<sqlx::Sqlite>>\n  <i8 as sqlx::Type<sqlx::MySql>>\n  <i16 as sqlx::Type<sqlx::Postgres>>\n  <i16 as sqlx::Type<sqlx::Sqlite>>\nand 60 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&uuid::Uuid` to implement `sqlx::Type<sqlx::Sqlite>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&uuid::Uuid>` to implement `Encode<'_, sqlx::Sqlite>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs","byte_start":2895,"byte_end":2909,"line_start":79,"line_end":79,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `uuid::Uuid: sqlx::Type<sqlx::Sqlite>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_sqlite!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `sqlx::Type<sqlx::Sqlite>` is not implemented for `uuid::Uuid`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `sqlx::Type<DB>`:\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m           and 60 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&uuid::Uuid` to implement `sqlx::Type<sqlx::Sqlite>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&uuid::Uuid>` to implement `Encode<'_, sqlx::Sqlite>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `sqlx::query::Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query.rs:79:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m79\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Query::<'q, DB, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `chrono::naive::date::NaiveDate: Encode<'_, sqlx::Sqlite>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs","byte_start":98,"byte_end":135,"line_start":4,"line_end":4,"column_start":1,"column_end":38,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_sqlite!();","highlight_start":1,"highlight_end":38}],"label":"the trait `Encode<'_, sqlx::Sqlite>` is not implemented for `chrono::naive::date::NaiveDate`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs","byte_start":98,"byte_end":135,"line_start":4,"line_end":4,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_sqlite!();","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs","byte_start":98,"byte_end":135,"line_start":4,"line_end":4,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_sqlite!();","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `Encode<'q, DB>`:\n  <bool as Encode<'q, sqlx::Sqlite>>\n  <bool as Encode<'_, sqlx::Postgres>>\n  <bool as Encode<'_, sqlx::MySql>>\n  <i8 as Encode<'q, sqlx::Sqlite>>\n  <i8 as Encode<'_, sqlx::Postgres>>\n  <i8 as Encode<'_, sqlx::MySql>>\n  <i16 as Encode<'q, sqlx::Sqlite>>\n  <i16 as Encode<'_, sqlx::Postgres>>\nand 52 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&chrono::naive::date::NaiveDate` to implement `Encode<'_, sqlx::Sqlite>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"1 redundant requirement hidden","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&chrono::naive::date::NaiveDate>` to implement `Encode<'_, sqlx::Sqlite>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs","byte_start":1595,"byte_end":1609,"line_start":54,"line_end":54,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `chrono::naive::date::NaiveDate: Encode<'_, sqlx::Sqlite>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_sqlite!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Encode<'_, sqlx::Sqlite>` is not implemented for `chrono::naive::date::NaiveDate`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `Encode<'q, DB>`:\u001b[0m\n\u001b[0m             <bool as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i16 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m           and 52 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&chrono::naive::date::NaiveDate` to implement `Encode<'_, sqlx::Sqlite>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: 1 redundant requirement hidden\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&chrono::naive::date::NaiveDate>` to implement `Encode<'_, sqlx::Sqlite>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs:54:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `chrono::naive::date::NaiveDate: sqlx::Type<sqlx::Sqlite>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs","byte_start":98,"byte_end":135,"line_start":4,"line_end":4,"column_start":1,"column_end":38,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_sqlite!();","highlight_start":1,"highlight_end":38}],"label":"the trait `sqlx::Type<sqlx::Sqlite>` is not implemented for `chrono::naive::date::NaiveDate`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs","byte_start":98,"byte_end":135,"line_start":4,"line_end":4,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_sqlite!();","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs","byte_start":98,"byte_end":135,"line_start":4,"line_end":4,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_sqlite!();","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `sqlx::Type<DB>`:\n  <bool as sqlx::Type<sqlx::Postgres>>\n  <bool as sqlx::Type<sqlx::Sqlite>>\n  <bool as sqlx::Type<sqlx::MySql>>\n  <i8 as sqlx::Type<sqlx::Postgres>>\n  <i8 as sqlx::Type<sqlx::Sqlite>>\n  <i8 as sqlx::Type<sqlx::MySql>>\n  <i16 as sqlx::Type<sqlx::Postgres>>\n  <i16 as sqlx::Type<sqlx::Sqlite>>\nand 60 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&chrono::naive::date::NaiveDate` to implement `sqlx::Type<sqlx::Sqlite>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&chrono::naive::date::NaiveDate>` to implement `Encode<'_, sqlx::Sqlite>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs","byte_start":1595,"byte_end":1609,"line_start":54,"line_end":54,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `chrono::naive::date::NaiveDate: sqlx::Type<sqlx::Sqlite>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_sqlite!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `sqlx::Type<sqlx::Sqlite>` is not implemented for `chrono::naive::date::NaiveDate`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `sqlx::Type<DB>`:\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m           and 60 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&chrono::naive::date::NaiveDate` to implement `sqlx::Type<sqlx::Sqlite>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&chrono::naive::date::NaiveDate>` to implement `Encode<'_, sqlx::Sqlite>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs:54:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `chrono::naive::time::NaiveTime: Encode<'_, sqlx::Sqlite>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs","byte_start":98,"byte_end":135,"line_start":4,"line_end":4,"column_start":1,"column_end":38,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_sqlite!();","highlight_start":1,"highlight_end":38}],"label":"the trait `Encode<'_, sqlx::Sqlite>` is not implemented for `chrono::naive::time::NaiveTime`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs","byte_start":98,"byte_end":135,"line_start":4,"line_end":4,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_sqlite!();","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs","byte_start":98,"byte_end":135,"line_start":4,"line_end":4,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_sqlite!();","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `Encode<'q, DB>`:\n  <bool as Encode<'q, sqlx::Sqlite>>\n  <bool as Encode<'_, sqlx::Postgres>>\n  <bool as Encode<'_, sqlx::MySql>>\n  <i8 as Encode<'q, sqlx::Sqlite>>\n  <i8 as Encode<'_, sqlx::Postgres>>\n  <i8 as Encode<'_, sqlx::MySql>>\n  <i16 as Encode<'q, sqlx::Sqlite>>\n  <i16 as Encode<'_, sqlx::Postgres>>\nand 52 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&chrono::naive::time::NaiveTime` to implement `Encode<'_, sqlx::Sqlite>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"1 redundant requirement hidden","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&chrono::naive::time::NaiveTime>` to implement `Encode<'_, sqlx::Sqlite>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs","byte_start":1595,"byte_end":1609,"line_start":54,"line_end":54,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `chrono::naive::time::NaiveTime: Encode<'_, sqlx::Sqlite>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_sqlite!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Encode<'_, sqlx::Sqlite>` is not implemented for `chrono::naive::time::NaiveTime`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `Encode<'q, DB>`:\u001b[0m\n\u001b[0m             <bool as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i16 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m           and 52 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&chrono::naive::time::NaiveTime` to implement `Encode<'_, sqlx::Sqlite>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: 1 redundant requirement hidden\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&chrono::naive::time::NaiveTime>` to implement `Encode<'_, sqlx::Sqlite>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs:54:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `chrono::naive::time::NaiveTime: sqlx::Type<sqlx::Sqlite>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs","byte_start":98,"byte_end":135,"line_start":4,"line_end":4,"column_start":1,"column_end":38,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_sqlite!();","highlight_start":1,"highlight_end":38}],"label":"the trait `sqlx::Type<sqlx::Sqlite>` is not implemented for `chrono::naive::time::NaiveTime`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs","byte_start":98,"byte_end":135,"line_start":4,"line_end":4,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_sqlite!();","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs","byte_start":98,"byte_end":135,"line_start":4,"line_end":4,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_sqlite!();","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `sqlx::Type<DB>`:\n  <bool as sqlx::Type<sqlx::Postgres>>\n  <bool as sqlx::Type<sqlx::Sqlite>>\n  <bool as sqlx::Type<sqlx::MySql>>\n  <i8 as sqlx::Type<sqlx::Postgres>>\n  <i8 as sqlx::Type<sqlx::Sqlite>>\n  <i8 as sqlx::Type<sqlx::MySql>>\n  <i16 as sqlx::Type<sqlx::Postgres>>\n  <i16 as sqlx::Type<sqlx::Sqlite>>\nand 60 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&chrono::naive::time::NaiveTime` to implement `sqlx::Type<sqlx::Sqlite>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&chrono::naive::time::NaiveTime>` to implement `Encode<'_, sqlx::Sqlite>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs","byte_start":1595,"byte_end":1609,"line_start":54,"line_end":54,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `chrono::naive::time::NaiveTime: sqlx::Type<sqlx::Sqlite>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_sqlite!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `sqlx::Type<sqlx::Sqlite>` is not implemented for `chrono::naive::time::NaiveTime`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `sqlx::Type<DB>`:\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m           and 60 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&chrono::naive::time::NaiveTime` to implement `sqlx::Type<sqlx::Sqlite>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&chrono::naive::time::NaiveTime>` to implement `Encode<'_, sqlx::Sqlite>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs:54:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `chrono::naive::datetime::NaiveDateTime: Encode<'_, sqlx::Sqlite>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs","byte_start":98,"byte_end":135,"line_start":4,"line_end":4,"column_start":1,"column_end":38,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_sqlite!();","highlight_start":1,"highlight_end":38}],"label":"the trait `Encode<'_, sqlx::Sqlite>` is not implemented for `chrono::naive::datetime::NaiveDateTime`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs","byte_start":98,"byte_end":135,"line_start":4,"line_end":4,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_sqlite!();","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs","byte_start":98,"byte_end":135,"line_start":4,"line_end":4,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_sqlite!();","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `Encode<'q, DB>`:\n  <bool as Encode<'q, sqlx::Sqlite>>\n  <bool as Encode<'_, sqlx::Postgres>>\n  <bool as Encode<'_, sqlx::MySql>>\n  <i8 as Encode<'q, sqlx::Sqlite>>\n  <i8 as Encode<'_, sqlx::Postgres>>\n  <i8 as Encode<'_, sqlx::MySql>>\n  <i16 as Encode<'q, sqlx::Sqlite>>\n  <i16 as Encode<'_, sqlx::Postgres>>\nand 52 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&chrono::naive::datetime::NaiveDateTime` to implement `Encode<'_, sqlx::Sqlite>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"1 redundant requirement hidden","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&chrono::naive::datetime::NaiveDateTime>` to implement `Encode<'_, sqlx::Sqlite>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs","byte_start":1595,"byte_end":1609,"line_start":54,"line_end":54,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `chrono::naive::datetime::NaiveDateTime: Encode<'_, sqlx::Sqlite>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_sqlite!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Encode<'_, sqlx::Sqlite>` is not implemented for `chrono::naive::datetime::NaiveDateTime`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `Encode<'q, DB>`:\u001b[0m\n\u001b[0m             <bool as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i16 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m           and 52 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&chrono::naive::datetime::NaiveDateTime` to implement `Encode<'_, sqlx::Sqlite>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: 1 redundant requirement hidden\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&chrono::naive::datetime::NaiveDateTime>` to implement `Encode<'_, sqlx::Sqlite>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs:54:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `chrono::naive::datetime::NaiveDateTime: sqlx::Type<sqlx::Sqlite>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs","byte_start":98,"byte_end":135,"line_start":4,"line_end":4,"column_start":1,"column_end":38,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_sqlite!();","highlight_start":1,"highlight_end":38}],"label":"the trait `sqlx::Type<sqlx::Sqlite>` is not implemented for `chrono::naive::datetime::NaiveDateTime`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs","byte_start":98,"byte_end":135,"line_start":4,"line_end":4,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_sqlite!();","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs","byte_start":98,"byte_end":135,"line_start":4,"line_end":4,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_sqlite!();","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `sqlx::Type<DB>`:\n  <bool as sqlx::Type<sqlx::Postgres>>\n  <bool as sqlx::Type<sqlx::Sqlite>>\n  <bool as sqlx::Type<sqlx::MySql>>\n  <i8 as sqlx::Type<sqlx::Postgres>>\n  <i8 as sqlx::Type<sqlx::Sqlite>>\n  <i8 as sqlx::Type<sqlx::MySql>>\n  <i16 as sqlx::Type<sqlx::Postgres>>\n  <i16 as sqlx::Type<sqlx::Sqlite>>\nand 60 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&chrono::naive::datetime::NaiveDateTime` to implement `sqlx::Type<sqlx::Sqlite>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&chrono::naive::datetime::NaiveDateTime>` to implement `Encode<'_, sqlx::Sqlite>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs","byte_start":1595,"byte_end":1609,"line_start":54,"line_end":54,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `chrono::naive::datetime::NaiveDateTime: sqlx::Type<sqlx::Sqlite>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_sqlite!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `sqlx::Type<sqlx::Sqlite>` is not implemented for `chrono::naive::datetime::NaiveDateTime`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `sqlx::Type<DB>`:\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m           and 60 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&chrono::naive::datetime::NaiveDateTime` to implement `sqlx::Type<sqlx::Sqlite>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&chrono::naive::datetime::NaiveDateTime>` to implement `Encode<'_, sqlx::Sqlite>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs:54:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `chrono::datetime::DateTime<chrono::offset::utc::Utc>: Encode<'_, sqlx::Sqlite>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs","byte_start":98,"byte_end":135,"line_start":4,"line_end":4,"column_start":1,"column_end":38,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_sqlite!();","highlight_start":1,"highlight_end":38}],"label":"the trait `Encode<'_, sqlx::Sqlite>` is not implemented for `chrono::datetime::DateTime<chrono::offset::utc::Utc>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs","byte_start":98,"byte_end":135,"line_start":4,"line_end":4,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_sqlite!();","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs","byte_start":98,"byte_end":135,"line_start":4,"line_end":4,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_sqlite!();","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `Encode<'q, DB>`:\n  <bool as Encode<'q, sqlx::Sqlite>>\n  <bool as Encode<'_, sqlx::Postgres>>\n  <bool as Encode<'_, sqlx::MySql>>\n  <i8 as Encode<'q, sqlx::Sqlite>>\n  <i8 as Encode<'_, sqlx::Postgres>>\n  <i8 as Encode<'_, sqlx::MySql>>\n  <i16 as Encode<'q, sqlx::Sqlite>>\n  <i16 as Encode<'_, sqlx::Postgres>>\nand 52 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&chrono::datetime::DateTime<chrono::offset::utc::Utc>` to implement `Encode<'_, sqlx::Sqlite>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"1 redundant requirement hidden","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&chrono::datetime::DateTime<chrono::offset::utc::Utc>>` to implement `Encode<'_, sqlx::Sqlite>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs","byte_start":1595,"byte_end":1609,"line_start":54,"line_end":54,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `chrono::datetime::DateTime<chrono::offset::utc::Utc>: Encode<'_, sqlx::Sqlite>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_sqlite!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Encode<'_, sqlx::Sqlite>` is not implemented for `chrono::datetime::DateTime<chrono::offset::utc::Utc>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `Encode<'q, DB>`:\u001b[0m\n\u001b[0m             <bool as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i16 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m           and 52 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&chrono::datetime::DateTime<chrono::offset::utc::Utc>` to implement `Encode<'_, sqlx::Sqlite>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: 1 redundant requirement hidden\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&chrono::datetime::DateTime<chrono::offset::utc::Utc>>` to implement `Encode<'_, sqlx::Sqlite>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs:54:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `chrono::datetime::DateTime<chrono::offset::utc::Utc>: sqlx::Type<sqlx::Sqlite>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs","byte_start":98,"byte_end":135,"line_start":4,"line_end":4,"column_start":1,"column_end":38,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_sqlite!();","highlight_start":1,"highlight_end":38}],"label":"the trait `sqlx::Type<sqlx::Sqlite>` is not implemented for `chrono::datetime::DateTime<chrono::offset::utc::Utc>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs","byte_start":98,"byte_end":135,"line_start":4,"line_end":4,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_sqlite!();","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs","byte_start":98,"byte_end":135,"line_start":4,"line_end":4,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_sqlite!();","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `sqlx::Type<DB>`:\n  <bool as sqlx::Type<sqlx::Postgres>>\n  <bool as sqlx::Type<sqlx::Sqlite>>\n  <bool as sqlx::Type<sqlx::MySql>>\n  <i8 as sqlx::Type<sqlx::Postgres>>\n  <i8 as sqlx::Type<sqlx::Sqlite>>\n  <i8 as sqlx::Type<sqlx::MySql>>\n  <i16 as sqlx::Type<sqlx::Postgres>>\n  <i16 as sqlx::Type<sqlx::Sqlite>>\nand 60 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&chrono::datetime::DateTime<chrono::offset::utc::Utc>` to implement `sqlx::Type<sqlx::Sqlite>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&chrono::datetime::DateTime<chrono::offset::utc::Utc>>` to implement `Encode<'_, sqlx::Sqlite>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs","byte_start":1595,"byte_end":1609,"line_start":54,"line_end":54,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `chrono::datetime::DateTime<chrono::offset::utc::Utc>: sqlx::Type<sqlx::Sqlite>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_sqlite!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `sqlx::Type<sqlx::Sqlite>` is not implemented for `chrono::datetime::DateTime<chrono::offset::utc::Utc>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `sqlx::Type<DB>`:\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m           and 60 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&chrono::datetime::DateTime<chrono::offset::utc::Utc>` to implement `sqlx::Type<sqlx::Sqlite>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&chrono::datetime::DateTime<chrono::offset::utc::Utc>>` to implement `Encode<'_, sqlx::Sqlite>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs:54:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `chrono::datetime::DateTime<chrono::offset::local::Local>: Encode<'_, sqlx::Sqlite>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs","byte_start":98,"byte_end":135,"line_start":4,"line_end":4,"column_start":1,"column_end":38,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_sqlite!();","highlight_start":1,"highlight_end":38}],"label":"the trait `Encode<'_, sqlx::Sqlite>` is not implemented for `chrono::datetime::DateTime<chrono::offset::local::Local>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs","byte_start":98,"byte_end":135,"line_start":4,"line_end":4,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_sqlite!();","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs","byte_start":98,"byte_end":135,"line_start":4,"line_end":4,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_sqlite!();","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `Encode<'q, DB>`:\n  <bool as Encode<'q, sqlx::Sqlite>>\n  <bool as Encode<'_, sqlx::Postgres>>\n  <bool as Encode<'_, sqlx::MySql>>\n  <i8 as Encode<'q, sqlx::Sqlite>>\n  <i8 as Encode<'_, sqlx::Postgres>>\n  <i8 as Encode<'_, sqlx::MySql>>\n  <i16 as Encode<'q, sqlx::Sqlite>>\n  <i16 as Encode<'_, sqlx::Postgres>>\nand 52 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&chrono::datetime::DateTime<chrono::offset::local::Local>` to implement `Encode<'_, sqlx::Sqlite>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"1 redundant requirement hidden","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&chrono::datetime::DateTime<chrono::offset::local::Local>>` to implement `Encode<'_, sqlx::Sqlite>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs","byte_start":1595,"byte_end":1609,"line_start":54,"line_end":54,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `chrono::datetime::DateTime<chrono::offset::local::Local>: Encode<'_, sqlx::Sqlite>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_sqlite!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Encode<'_, sqlx::Sqlite>` is not implemented for `chrono::datetime::DateTime<chrono::offset::local::Local>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `Encode<'q, DB>`:\u001b[0m\n\u001b[0m             <bool as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i16 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m           and 52 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&chrono::datetime::DateTime<chrono::offset::local::Local>` to implement `Encode<'_, sqlx::Sqlite>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: 1 redundant requirement hidden\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&chrono::datetime::DateTime<chrono::offset::local::Local>>` to implement `Encode<'_, sqlx::Sqlite>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs:54:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `chrono::datetime::DateTime<chrono::offset::local::Local>: sqlx::Type<sqlx::Sqlite>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs","byte_start":98,"byte_end":135,"line_start":4,"line_end":4,"column_start":1,"column_end":38,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_sqlite!();","highlight_start":1,"highlight_end":38}],"label":"the trait `sqlx::Type<sqlx::Sqlite>` is not implemented for `chrono::datetime::DateTime<chrono::offset::local::Local>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs","byte_start":98,"byte_end":135,"line_start":4,"line_end":4,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_sqlite!();","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs","byte_start":98,"byte_end":135,"line_start":4,"line_end":4,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_sqlite!();","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `sqlx::Type<DB>`:\n  <bool as sqlx::Type<sqlx::Postgres>>\n  <bool as sqlx::Type<sqlx::Sqlite>>\n  <bool as sqlx::Type<sqlx::MySql>>\n  <i8 as sqlx::Type<sqlx::Postgres>>\n  <i8 as sqlx::Type<sqlx::Sqlite>>\n  <i8 as sqlx::Type<sqlx::MySql>>\n  <i16 as sqlx::Type<sqlx::Postgres>>\n  <i16 as sqlx::Type<sqlx::Sqlite>>\nand 60 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&chrono::datetime::DateTime<chrono::offset::local::Local>` to implement `sqlx::Type<sqlx::Sqlite>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&chrono::datetime::DateTime<chrono::offset::local::Local>>` to implement `Encode<'_, sqlx::Sqlite>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs","byte_start":1595,"byte_end":1609,"line_start":54,"line_end":54,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `chrono::datetime::DateTime<chrono::offset::local::Local>: sqlx::Type<sqlx::Sqlite>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_sqlite!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `sqlx::Type<sqlx::Sqlite>` is not implemented for `chrono::datetime::DateTime<chrono::offset::local::Local>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `sqlx::Type<DB>`:\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m           and 60 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&chrono::datetime::DateTime<chrono::offset::local::Local>` to implement `sqlx::Type<sqlx::Sqlite>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&chrono::datetime::DateTime<chrono::offset::local::Local>>` to implement `Encode<'_, sqlx::Sqlite>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs:54:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `chrono::datetime::DateTime<chrono::offset::fixed::FixedOffset>: Encode<'_, sqlx::Sqlite>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs","byte_start":98,"byte_end":135,"line_start":4,"line_end":4,"column_start":1,"column_end":38,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_sqlite!();","highlight_start":1,"highlight_end":38}],"label":"the trait `Encode<'_, sqlx::Sqlite>` is not implemented for `chrono::datetime::DateTime<chrono::offset::fixed::FixedOffset>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs","byte_start":98,"byte_end":135,"line_start":4,"line_end":4,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_sqlite!();","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs","byte_start":98,"byte_end":135,"line_start":4,"line_end":4,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_sqlite!();","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `Encode<'q, DB>`:\n  <bool as Encode<'q, sqlx::Sqlite>>\n  <bool as Encode<'_, sqlx::Postgres>>\n  <bool as Encode<'_, sqlx::MySql>>\n  <i8 as Encode<'q, sqlx::Sqlite>>\n  <i8 as Encode<'_, sqlx::Postgres>>\n  <i8 as Encode<'_, sqlx::MySql>>\n  <i16 as Encode<'q, sqlx::Sqlite>>\n  <i16 as Encode<'_, sqlx::Postgres>>\nand 52 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&chrono::datetime::DateTime<chrono::offset::fixed::FixedOffset>` to implement `Encode<'_, sqlx::Sqlite>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"1 redundant requirement hidden","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&chrono::datetime::DateTime<chrono::offset::fixed::FixedOffset>>` to implement `Encode<'_, sqlx::Sqlite>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs","byte_start":1595,"byte_end":1609,"line_start":54,"line_end":54,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `chrono::datetime::DateTime<chrono::offset::fixed::FixedOffset>: Encode<'_, sqlx::Sqlite>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_sqlite!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Encode<'_, sqlx::Sqlite>` is not implemented for `chrono::datetime::DateTime<chrono::offset::fixed::FixedOffset>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `Encode<'q, DB>`:\u001b[0m\n\u001b[0m             <bool as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i16 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m           and 52 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&chrono::datetime::DateTime<chrono::offset::fixed::FixedOffset>` to implement `Encode<'_, sqlx::Sqlite>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: 1 redundant requirement hidden\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&chrono::datetime::DateTime<chrono::offset::fixed::FixedOffset>>` to implement `Encode<'_, sqlx::Sqlite>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs:54:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `chrono::datetime::DateTime<chrono::offset::fixed::FixedOffset>: sqlx::Type<sqlx::Sqlite>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs","byte_start":98,"byte_end":135,"line_start":4,"line_end":4,"column_start":1,"column_end":38,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_sqlite!();","highlight_start":1,"highlight_end":38}],"label":"the trait `sqlx::Type<sqlx::Sqlite>` is not implemented for `chrono::datetime::DateTime<chrono::offset::fixed::FixedOffset>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs","byte_start":98,"byte_end":135,"line_start":4,"line_end":4,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_sqlite!();","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs","byte_start":98,"byte_end":135,"line_start":4,"line_end":4,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_sqlite!();","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `sqlx::Type<DB>`:\n  <bool as sqlx::Type<sqlx::Postgres>>\n  <bool as sqlx::Type<sqlx::Sqlite>>\n  <bool as sqlx::Type<sqlx::MySql>>\n  <i8 as sqlx::Type<sqlx::Postgres>>\n  <i8 as sqlx::Type<sqlx::Sqlite>>\n  <i8 as sqlx::Type<sqlx::MySql>>\n  <i16 as sqlx::Type<sqlx::Postgres>>\n  <i16 as sqlx::Type<sqlx::Sqlite>>\nand 60 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&chrono::datetime::DateTime<chrono::offset::fixed::FixedOffset>` to implement `sqlx::Type<sqlx::Sqlite>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&chrono::datetime::DateTime<chrono::offset::fixed::FixedOffset>>` to implement `Encode<'_, sqlx::Sqlite>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs","byte_start":1595,"byte_end":1609,"line_start":54,"line_end":54,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `chrono::datetime::DateTime<chrono::offset::fixed::FixedOffset>: sqlx::Type<sqlx::Sqlite>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_sqlite!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `sqlx::Type<sqlx::Sqlite>` is not implemented for `chrono::datetime::DateTime<chrono::offset::fixed::FixedOffset>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `sqlx::Type<DB>`:\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m           and 60 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&chrono::datetime::DateTime<chrono::offset::fixed::FixedOffset>` to implement `sqlx::Type<sqlx::Sqlite>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&chrono::datetime::DateTime<chrono::offset::fixed::FixedOffset>>` to implement `Encode<'_, sqlx::Sqlite>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs:54:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `uuid::Uuid: Encode<'_, sqlx::Sqlite>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs","byte_start":98,"byte_end":135,"line_start":4,"line_end":4,"column_start":1,"column_end":38,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_sqlite!();","highlight_start":1,"highlight_end":38}],"label":"the trait `Encode<'_, sqlx::Sqlite>` is not implemented for `uuid::Uuid`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs","byte_start":98,"byte_end":135,"line_start":4,"line_end":4,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_sqlite!();","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs","byte_start":98,"byte_end":135,"line_start":4,"line_end":4,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_sqlite!();","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `Encode<'q, DB>`:\n  <bool as Encode<'q, sqlx::Sqlite>>\n  <bool as Encode<'_, sqlx::Postgres>>\n  <bool as Encode<'_, sqlx::MySql>>\n  <i8 as Encode<'q, sqlx::Sqlite>>\n  <i8 as Encode<'_, sqlx::Postgres>>\n  <i8 as Encode<'_, sqlx::MySql>>\n  <i16 as Encode<'q, sqlx::Sqlite>>\n  <i16 as Encode<'_, sqlx::Postgres>>\nand 52 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&uuid::Uuid` to implement `Encode<'_, sqlx::Sqlite>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"1 redundant requirement hidden","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&uuid::Uuid>` to implement `Encode<'_, sqlx::Sqlite>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs","byte_start":1595,"byte_end":1609,"line_start":54,"line_end":54,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `uuid::Uuid: Encode<'_, sqlx::Sqlite>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_sqlite!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Encode<'_, sqlx::Sqlite>` is not implemented for `uuid::Uuid`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `Encode<'q, DB>`:\u001b[0m\n\u001b[0m             <bool as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as Encode<'_, sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as Encode<'q, sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i16 as Encode<'_, sqlx::Postgres>>\u001b[0m\n\u001b[0m           and 52 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&uuid::Uuid` to implement `Encode<'_, sqlx::Sqlite>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: 1 redundant requirement hidden\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&uuid::Uuid>` to implement `Encode<'_, sqlx::Sqlite>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs:54:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `uuid::Uuid: sqlx::Type<sqlx::Sqlite>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs","byte_start":98,"byte_end":135,"line_start":4,"line_end":4,"column_start":1,"column_end":38,"is_primary":true,"text":[{"text":"sea_query::sea_query_driver_sqlite!();","highlight_start":1,"highlight_end":38}],"label":"the trait `sqlx::Type<sqlx::Sqlite>` is not implemented for `uuid::Uuid`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs","byte_start":98,"byte_end":135,"line_start":4,"line_end":4,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_sqlite!();","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"bind_box!","def_site_span":{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs","byte_start":98,"byte_end":135,"line_start":4,"line_end":4,"column_start":1,"column_end":38,"is_primary":false,"text":[{"text":"sea_query::sea_query_driver_sqlite!();","highlight_start":1,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `sqlx::Type<DB>`:\n  <bool as sqlx::Type<sqlx::Postgres>>\n  <bool as sqlx::Type<sqlx::Sqlite>>\n  <bool as sqlx::Type<sqlx::MySql>>\n  <i8 as sqlx::Type<sqlx::Postgres>>\n  <i8 as sqlx::Type<sqlx::Sqlite>>\n  <i8 as sqlx::Type<sqlx::MySql>>\n  <i16 as sqlx::Type<sqlx::Postgres>>\n  <i16 as sqlx::Type<sqlx::Sqlite>>\nand 60 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&uuid::Uuid` to implement `sqlx::Type<sqlx::Sqlite>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Option<&uuid::Uuid>` to implement `Encode<'_, sqlx::Sqlite>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","code":null,"level":"note","spans":[{"file_name":"/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs","byte_start":1595,"byte_end":1609,"line_start":54,"line_end":54,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {","highlight_start":32,"highlight_end":46}],"label":"required by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `uuid::Uuid: sqlx::Type<sqlx::Sqlite>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sea-schema-0.8.1/src/sqlite/executor/real.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0msea_query::sea_query_driver_sqlite!();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `sqlx::Type<sqlx::Sqlite>` is not implemented for `uuid::Uuid`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `sqlx::Type<DB>`:\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <bool as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m             <i8 as sqlx::Type<sqlx::MySql>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Postgres>>\u001b[0m\n\u001b[0m             <i16 as sqlx::Type<sqlx::Sqlite>>\u001b[0m\n\u001b[0m           and 60 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&uuid::Uuid` to implement `sqlx::Type<sqlx::Sqlite>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Option<&uuid::Uuid>` to implement `Encode<'_, sqlx::Sqlite>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elicharlese/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-core-0.5.13/src/query_as.rs:54:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn bind<T: 'q + Send + Encode<'q, DB> + Type<DB>>(mut self, value: T) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `QueryAs::<'q, DB, O, <DB as HasArguments<'q>>::Arguments>::bind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `bind_box` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 120 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 120 previous errors\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"For more information about this error, try `rustc --explain E0277`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0277`.\u001b[0m\n"}
